import os
import asyncio
import logging
import openai
import json
import random
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.dispatcher.middlewares.base import BaseMiddleware
from dotenv import load_dotenv
from apscheduler.schedulers.asyncio import AsyncIOScheduler

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: –≤—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤ PowerShell)
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ OpenAI
client = openai.OpenAI(api_key=OPENAI_API_KEY)

bot = Bot(token=TOKEN)
dp = Dispatcher()
scheduler = AsyncIOScheduler()

# --- Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ---
class LoggingMiddleware(BaseMiddleware):
    async def __call__(self, handler, event: Message, data: dict):
        logging.info(f"User {event.from_user.id} ({event.from_user.full_name}) sent: {event.text}")
        return await handler(event, data)

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º middleware
dp.message.middleware(LoggingMiddleware())

# –ü–∞–ø–∫–∞ —Å –º–µ–Ω—é –∏ —è–∑—ã–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
MENU_DIR = "menusc"
DEFAULT_LANGUAGE = "uk"

LANGUAGE_CODES = {
    "–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞ üá∫üá¶ (–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞)": "uk",
    "–†—É—Å—Å–∫–∏–π üá∑üá∫ (–†—É—Å—Å–∫–∏–π)": "ru",
    "ƒåe≈°tina üá®üáø (ƒåe≈°tina)": "cs",
    "English üá¨üáß (English)": "en",
    "MoldoveneascƒÉ üá≤üá© (MoldoveneascƒÉ)": "md",
    "Rom√¢nƒÉ üá∑üá¥ (Rom√¢nƒÉ)": "ro"
}

# –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–æ–ø-—Å–ª–æ–≤ –∏ —Å–∏–Ω–æ–Ω–∏–º–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞ stopwords.json
def load_stopwords():
    path = os.path.join(MENU_DIR, "stopwords.json")
    if os.path.exists(path):
        try:
            with open(path, "r", encoding="utf-8") as f:
                return json.load(f)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–æ–ø-—Å–ª–æ–≤ –∏–∑ {path}: {e}")
    return {}

STOPWORDS_DATA = load_stopwords()

def get_stop_words(language):
    return STOPWORDS_DATA.get(language, {}).get("stop_words", [])

def get_synonyms(language):
    default_category_keywords = {
        "sushi": ["—Å—É—à–∏", "—Ä–æ–ª", "maki", "–º–∞–∫—ñ"],
        "grill": ["–≥—Ä–∏–ª—å", "–±–∞—Ä–±–µ–∫—é", "–º—è—Å–æ", "—à–∞—à–ª—ã–∫", "—Å—Ç–µ–π–∫"],
        "sety": ["—Å–µ—Ç—ã", "—Å–µ—Ç", "sety", "set"]
    }
    synonyms = STOPWORDS_DATA.get(language, {}).get("synonyms", {})
    return synonyms if synonyms else default_category_keywords

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Ñ—Ä–∞–∑—ã –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –º–µ–Ω—é (–∑–∞–∫–∞–∑ –Ω–∞ –≤–µ—á–µ—Ä –∏ —Ç.–¥.)
EXTRA_MENU_PHRASES = {
    "ru": ["–Ω–∞ –≤–µ—á–µ—Ä", "–Ω–∞ —É–∂–∏–Ω", "–≤–µ—á–µ—Ä–Ω–µ–µ –º–µ–Ω—é", "–≤–µ—á–µ—Ä–Ω–∏–µ –±–ª—é–¥–∞", "—Ä–µ–∫–æ–º–µ–Ω–¥—É–π –Ω–∞ –≤–µ—á–µ—Ä", "–∑–∞–∫–∞–∑ –Ω–∞ –≤–µ—á–µ—Ä"],
    "uk": ["–Ω–∞ –≤–µ—á—ñ—Ä", "–≤–µ—á—ñ—Ä–Ω—î –º–µ–Ω—é", "–≤–µ—á—ñ—Ä–Ω—ñ —Å—Ç—Ä–∞–≤–∏", "—Ä–µ–∫–æ–º–µ–Ω–¥—É–π –Ω–∞ –≤–µ—á—ñ—Ä", "–∑–∞–º–æ–≤ –Ω–∞ –≤–µ—á—ñ—Ä"],
    "en": ["evening", "dinner", "evening menu", "suggest dinner", "what to order for dinner"]
}

def get_combined_menu_keywords():
    combined = []
    for d in STOPWORDS_DATA.values():
        combined.extend(d.get("stop_words", []))
    for phrases in EXTRA_MENU_PHRASES.values():
        combined.extend(phrases)
    return combined

# –î–µ—Ç–µ–∫—Ü–∏—è —è–∑—ã–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ —Å—Ç–æ–ø-—Å–ª–æ–≤–∞–º (–∏–∑ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ—Ä–∞–∑)
def detect_query_language(query: str) -> str:
    query_lower = query.lower()
    for lang, phrases in EXTRA_MENU_PHRASES.items():
        if any(phrase in query_lower for phrase in phrases):
            return lang
    for lang, data in STOPWORDS_DATA.items():
        stop_words = data.get("stop_words", [])
        if any(sw in query_lower for sw in stop_words):
            return lang
    return None

# –°–ª–æ–≤–∞—Ä–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —è–∑—ã–∫–æ–≤
user_data = {}
user_languages = {}

def get_user_info(user_id, first_name, gender):
    if user_id not in user_data:
        polite_form = "–¥–æ—Ä–æ–≥–æ–π" if gender == "male" else "–¥–æ—Ä–æ–≥–∞—è"
        user_data[user_id] = {
            "name": first_name,
            "gender": polite_form,
            "language": DEFAULT_LANGUAGE
        }
    return user_data[user_id]

# –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞
def load_config(language=DEFAULT_LANGUAGE):
    config_file = os.path.join("configs", f"config_{language}.json")
    if not os.path.exists(config_file):
        logging.error(f"–§–∞–π–ª {config_file} –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.")
        language = DEFAULT_LANGUAGE
        config_file = os.path.join("configs", f"config_{language}.json")
    try:
        with open(config_file, "r", encoding="utf-8") as file:
            return json.load(file)
    except (FileNotFoundError, json.JSONDecodeError):
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ {config_file}.")
        return {}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –±–ª—é–¥ –∏–∑ –ª–æ–∫–∞–ª—å–Ω—ã—Ö JSON-—Ñ–∞–π–ª–æ–≤ –º–µ–Ω—é –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —è–∑—ã–∫—É –∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
def load_dishes(language, specific_category=None):
    dishes = []
    menu_path = os.path.join(MENU_DIR, language)
    file_mapping = {
        "sushi": "Sushi.json",
        "grill": "Grill.json",
        "sety": "SETY.json"
    }
    if specific_category and specific_category.lower() in file_mapping:
        file_path = os.path.join(menu_path, file_mapping[specific_category.lower()])
        if os.path.exists(file_path):
            try:
                with open(file_path, "r", encoding="utf-8") as f:
                    data = json.load(f)
                    for category in data.get("categories", []):
                        dishes.extend(category.get("items", []))
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–ª—é–¥ –∏–∑ {file_path}: {e}")
    else:
        if os.path.exists(menu_path):
            for filename in os.listdir(menu_path):
                if filename.endswith(".json") and filename.lower() != "stopwords.json":
                    file_path = os.path.join(menu_path, filename)
                    try:
                        with open(file_path, "r", encoding="utf-8") as f:
                            data = json.load(f)
                            for category in data.get("categories", []):
                                dishes.extend(category.get("items", []))
                    except Exception as e:
                        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–ª—é–¥ –∏–∑ {file_path}: {e}")
    return dishes

# –°–ª–æ–≤–∞—Ä—å —Å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–º–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏ –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
personal_comments = {
    "sushi": ["–û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä –¥–ª—è –ª—é–±–∏—Ç–µ–ª–µ–π —Å–≤–µ–∂–µ—Å—Ç–∏!", "–≠—Ç–∏ —Å—É—à–∏ –≤–∞—Å –Ω–µ —Ä–∞–∑–æ—á–∞—Ä—É—é—Ç!"],
    "grill": ["–î–ª—è –Ω–∞—Å—Ç–æ—è—â–∏—Ö –≥—É—Ä–º–∞–Ω–æ–≤!", "–û—Ç–ª–∏—á–Ω–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –≤–µ—á–µ—Ä–∏–Ω–∫–∏!"],
    "sety": ["–ò–¥–µ–∞–ª—å–Ω–æ–µ —Å–æ—á–µ—Ç–∞–Ω–∏–µ –≤–∫—É—Å–æ–≤!", "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ, —ç—Ç–æ —Ö–∏—Ç –Ω–∞—à–µ–≥–æ –º–µ–Ω—é!"],
    "general": ["–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∞–ø–ø–µ—Ç–∏—Ç–∞!", "–ù–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å –≤–∞—à–∏–º –∑–∞–∫–∞–∑–æ–º!"]
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ OpenAI (–¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤, –Ω–µ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –º–µ–Ω—é)
async def ask_openai(prompt, user_id, user_level="A1"):
    try:
        lower_prompt = prompt.lower()
        language = get_language(user_id)
        all_menu_keywords = get_combined_menu_keywords()
        if any(kw in lower_prompt for kw in all_menu_keywords):
            return "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /menu –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –∏–∑ –Ω–∞—à–µ–≥–æ –º–µ–Ω—é."
        
        config = load_config(language)
        system_prompt = config.get("description", "–¢—ã ‚Äì –ù–∏–∫–∞, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∫–∞ –∫–∞—Ñ–µ 'rg-bar'. –û—Ç–≤–µ—á–∞–π –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –∫–ª–∏–µ–Ω—Ç–æ–≤.")
        response_style = config.get("response_style", {})
        tone = response_style.get("tone", "–î—Ä—É–∂–µ–ª—é–±–Ω—ã–π, –Ω–æ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π")
        approach = response_style.get("approach", "–ò—Å–ø–æ–ª—å–∑—É–π –ø–æ–Ω—è—Ç–Ω—ã–π —è–∑—ã–∫ –∏ –≤–µ–∂–ª–∏–≤–æ—Å—Ç—å")
        
        user_message = (
            f"–Ø –ø–æ—Å–µ—Ç–∏—Ç–µ–ª—å –∫–∞—Ñ–µ 'rg-bar'. "
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—á–∞–π –Ω–∞ {language} —è–∑—ã–∫–µ. "
            f"–°—Ç–∏–ª—å: {tone}. –ü–æ–¥—Ö–æ–¥: {approach}. "
            f"–ú–æ–π –∑–∞–ø—Ä–æ—Å: {prompt}"
        )
        
        response = client.chat.completions.create(
            model="gpt-4o",
            messages=[
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": user_message}
            ]
        )
        return response.choices[0].message.content
    except Exception as e:
        logging.error(f"OpenAI error: {e}")
        return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ AI."

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π, —á—Ç–æ–±—ã –Ω–µ –ø–æ–≤—Ç–æ—Ä—è—Ç—å –æ–¥–Ω–∏ –∏ —Ç–µ –∂–µ –±–ª—é–¥–∞
user_recommendations = {}

# –§—É–Ω–∫—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –±–ª—é–¥–∞ –∏–∑ –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –º–µ–Ω—é —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∑–∞–¥–∞–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞
async def recommend_dish(query: str, user_id: int, language: str) -> str:
    query_lower = query.lower()
    synonyms = get_synonyms(language)
    
    target_category = None
    for cat, syn_list in synonyms.items():
        if any(kw in query_lower for kw in syn_list):
            target_category = cat
            break

    rec_category = target_category if target_category else "general"

    if user_id not in user_recommendations:
        user_recommendations[user_id] = {"sushi": set(), "grill": set(), "sety": set(), "general": set()}

    dishes = load_dishes(language, specific_category=target_category) if target_category else load_dishes(language)
    available = [d for d in dishes if d.get("name") not in user_recommendations[user_id][rec_category]]
    if not available:
        user_recommendations[user_id][rec_category] = set()
        available = dishes

    if not available:
        return f"‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ {target_category}."

    dish = random.choice(available)
    user_recommendations[user_id][rec_category].add(dish.get("name"))
    comment_list = personal_comments.get(target_category, personal_comments["general"])
    comment = random.choice(comment_list)
    user_info = user_data.get(user_id, {})
    name = user_info.get("name", "–¥—Ä—É–≥")
    polite_form = user_info.get("gender", "")
    return (f"{polite_form.capitalize()} {name}, –≤–æ—Ç –º–æ—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:\n"
            f"<b>{dish.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}</b> ({dish.get('category', '').capitalize()}) - {dish.get('price', '')}\n"
            f"{dish.get('description', '')}\n\n"
            f"{comment}")

def get_language(user_id):
    return user_data.get(user_id, {}).get("language", DEFAULT_LANGUAGE)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def send_welcome(message: Message):
    user_id = message.from_user.id
    first_name = message.from_user.first_name
    gender = "male" if message.from_user.username else "female"
    user_info = get_user_info(user_id, first_name, gender)
    name = user_info["name"]
    polite_form = user_info["gender"]

    config = load_config(user_info["language"])
    goal = config.get("goal", "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–∞—Ñ–µ 'rg-bar'. –Ø –ù–∏–∫–∞, –≤–∞—à–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∫–∞. –ë–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: https://www.rg-barliberec.com/")
    await message.answer(f"–ü—Ä–∏–≤–µ—Ç, {polite_form} {name}! üéì {goal}\n\n")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –º–µ–Ω—é, –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö —Ñ—Ä–∞–∑
@dp.message(lambda message: any(kw in message.text.lower() for kw in get_combined_menu_keywords()))
async def recommendation_handler(message: Message):
    user_id = message.from_user.id
    detected_lang = detect_query_language(message.text)
    if detected_lang is None:
        detected_lang = get_language(user_id)
    user_info = user_data.get(user_id, {})
    name = user_info.get("name", "–¥—Ä—É–≥")
    await message.answer(f"–°–µ–π—á–∞—Å –ø–æ—Å–º–æ—Ç—Ä—é, {name}...", parse_mode="HTML")
    await asyncio.sleep(random.randint(2, 5))
    recommendation = await recommend_dish(message.text, user_id, detected_lang)
    await message.answer(recommendation, parse_mode="HTML")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–º–µ–Ω—ã —è–∑—ã–∫–∞
@dp.message(Command("language"))
async def change_language(message: Message):
    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text=lang)] for lang in LANGUAGE_CODES.keys()],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    await message.answer("üåç –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –æ–±—â–µ–Ω–∏—è:", reply_markup=keyboard)

@dp.message(F.text.in_(LANGUAGE_CODES.keys()))
async def set_language(message: Message):
    user_languages[message.from_user.id] = LANGUAGE_CODES[message.text]
    if message.from_user.id in user_data:
        user_data[message.from_user.id]["language"] = LANGUAGE_CODES[message.text]
    await message.answer(f"‚úÖ –Ø–∑—ã–∫ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {message.text}", reply_markup=types.ReplyKeyboardRemove())

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞ –º–µ–Ω—é
@dp.message(Command("menu"))
async def menu_command(message: Message):
    language = get_language(message.from_user.id)
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üç£ Sushi", callback_data=f"menu_Sushi_{language}")],
        [InlineKeyboardButton(text="ü•¢ SETY", callback_data=f"menu_SETY_{language}")],
        [InlineKeyboardButton(text="üî• Grill", callback_data=f"menu_Grill_{language}")]
    ])
    await message.answer("üîπ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –º–µ–Ω—é:", reply_markup=keyboard)

@dp.callback_query(lambda c: c.data and c.data.startswith("menu_"))
async def menu_callback(callback: types.CallbackQuery):
    try:
        _, menu_type, language = callback.data.split("_")
        menu_path = os.path.join(MENU_DIR, language, f"{menu_type}.json")
        if not os.path.exists(menu_path):
            await callback.message.edit_text(f"‚ùå –ú–µ–Ω—é \"{menu_type}\" –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞.")
            return
        with open(menu_path, "r", encoding="utf-8") as f:
            data = json.load(f)
        title = data.get("menu_title", menu_type)
        description = data.get("description", "")
        menu_text = f"<b>{title}</b>\n{description}\n\n"
        for category in data.get("categories", []):
            cat_name = category.get("name", "")
            menu_text += f"<u>{cat_name}</u>\n"
            for item in category.get("items", []):
                name = item.get("name", "")
                price = item.get("price", "")
                item_desc = item.get("description", "")
                menu_text += f"üîπ <b>{name}</b> - {price}\n"
                if item_desc:
                    menu_text += f"  {item_desc}\n"
            menu_text += "\n"
        await callback.message.edit_text(menu_text, parse_mode="HTML")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback: {e}")
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–Ω—é.")
    await callback.answer()

# –û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –¥–∏–∞–ª–æ–≥–∞ (–µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–ª—é—á–µ–≤—ã—Ö —Ñ—Ä–∞–∑ –¥–ª—è –º–µ–Ω—é)
@dp.message(lambda message: not message.text.startswith("/") and not any(kw in message.text.lower() for kw in get_combined_menu_keywords()))
async def ai_response(message: Message):
    language = get_language(message.from_user.id)
    response = await ask_openai(message.text, message.from_user.id)
    await message.answer(response)

@dp.message(Command("support"))
async def support_handler(message: Message):
    support_text = "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞: [Mykolacherstvyi](https://t.me/Mykolacherstvyi)"
    await message.answer(support_text, parse_mode="Markdown")

@dp.message(Command("bots"))
async def bots_handler(message: Message):
    bots_text = (
        "–ü–æ–ª–µ–∑–Ω—ã–µ –±–æ—Ç—ã:\n"
        "‚Ä¢ [@MigrantHelperCZ_bot - —é—Ä–∏—Å—Ç](https://t.me/MigrantHelperCZ_bot)\n"
        "‚Ä¢ [@Holidayscz_bot - –≥–∏–¥ –ø–æ –ß–µ—Ö–∏–∏](https://t.me/Holidayscz_bot)\n"
        "‚Ä¢ [@ExamCZBot - —É—á–∏–º —á–µ—à—Å–∫–∏–π](https://t.me/ExamCZBot)"
    )
    await message.answer(bots_text, parse_mode="Markdown")

# –ù–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –∏ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Å–∞–π—Ç–∞
@dp.message(Command("contacts"))
async def contacts_handler(message: Message):
    contacts_text = "RG BAR - Tanvaldsk√° 299/299, 463 11 Liberec 30-Vratislavice nad Nisou\n+420 739 462 002"
    await message.answer(contacts_text)

@dp.message(Command("website"))
async def website_handler(message: Message):
    website_text = "https://www.rg-barliberec.com"
    await message.answer(website_text)

# –ù–æ–≤–∞—è –≤–µ—Ä—Å–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞—Ç–∏–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
async def set_bot_commands(bot: Bot):
    commands = [
        types.BotCommand(command="start", description="–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
        types.BotCommand(command="language", description="–í—ã–±—Ä–∞—Ç—å —è–∑—ã–∫"),
        types.BotCommand(command="menu", description="–∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç –∫–∞—Ñ–µ"),
        types.BotCommand(command="contacts", description="RG BAR - Tanvaldsk√° 299/299, 463 11 Liberec 30-Vratislavice nad Nisou +420 739 462 002"),
        types.BotCommand(command="website", description="https://www.rg-barliberec.com"),
        types.BotCommand(command="bots", description="–ü–æ–ª–µ–∑–Ω—ã–µ –±–æ—Ç—ã"),
        types.BotCommand(command="support", description="–¢–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫–∞")
    ]
    await bot.set_my_commands(commands)

async def main():
    await bot.delete_webhook(drop_pending_updates=True)
    await set_bot_commands(bot)
    scheduler.start()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
