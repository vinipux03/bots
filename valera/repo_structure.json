{
  "name": "валера",
  "type": "directory",
  "scanned_at": "2025-03-23T22:21:29.995608",
  "children": [
    {
      "name": "bots_clone",
      "type": "directory",
      "children": [
        {
          "name": "chat_summary.md",
          "type": "file",
          "size": 6716,
          "hash_md5": "be5e6f8244bdbbe9c8ee8656eaa7f230",
          "hash_sha1": "4d7cca8122f6404dacac25724da2712c2caba558",
          "content": "# Резюме проекта \"ProbnikCZ_bot\"\n\nЭтот документ содержит основные моменты и изменения, которые обсуждались для проекта Telegram-бота, использующего Aiogram и OpenAI API.\n\n## Структура проекта\n\n```\n/ProbnikCZ_bot\n│  ├─ main.py            # Точка входа. Здесь загружаются переменные окружения, инициализируется бот, регистрируются хендлеры и запускается polling.\n│  ├─ .env               # Файл с переменными окружения (BOT_TOKEN, OPENAI_API_KEY, и т.д.)\n│  ├─ requirements.txt   # Зависимости: aiogram==3.0.0b7, openai==0.27.0, python-dotenv==0.20.0, APScheduler==3.9.1.post1, и прочие.\n│  ├─ /configs           # Конфигурационные файлы для языковых настроек (config_ru.json, config_en.json, и т.д.)\n│  ├─ /gender_bot        # Файлы профилей для виртуального агента по гендеру:\n│  │     ├─ bot_men.json      # Профиль виртуального парня-компаньона (для женщин)\n│  │     └─ bot_woomen.json   # Профиль виртуальной девушки-компаньона (для мужчин)\n│  ├─ /menusc            # Меню по языкам (в каждой папке по 3 файла JSON для Sushi, Grill, SETY)\n│  ├─ /handlers          # Обработчики команд и сообщений\n│  │     ├─ __init__.py       # Функция register_handlers для регистрации всех хендлеров.\n│  │     ├─ start_handler.py  # Логика команды /start\n│  │     ├─ menu_handler.py   # Логика команды /menu и обработка callback'ов меню.\n│  │     ├─ language_handler.py # Логика смены языка\n│  │     └─ common_handler.py  # Прочие команды (/support, /bots, /contacts, /website и fallback).\n│  ├─ /services          # Бизнес-логика: работа с OpenAI API, рекомендации, загрузка конфигураций.\n│  │     ├─ __init__.py\n│  │     ├─ config_service.py  # Функции get_user_info, get_language, load_config, set_bot_commands.\n│  │     ├─ openai_service.py  # Функции get_companion_system_prompt, ask_openai_companion.\n│  │     └─ recommendation_service.py  # Логика рекомендаций из меню.\n│  └─ /utils             # Вспомогательные функции и middleware.\n│        ├─ __init__.py\n│        └─ logging_middleware.py  # Middleware для логирования входящих сообщений.\n```\n\n## Основные моменты реализации\n\n1. **Переменные окружения (.env):**  \n   - Файл содержит ключи, такие как BOT_TOKEN и OPENAI_API_KEY.\n   - Загружается с помощью `load_dotenv()` в main.py.\n\n2. **Главный файл (main.py):**  \n   - Инициализация бота, диспетчера, планировщика.\n   - Регистрация всех хендлеров через функцию `register_handlers(dp)`.\n   - Установка нативных команд через функцию `set_bot_commands(bot)`.\n   - Запуск polling.\n\n3. **Логика работы с OpenAI API (services/openai_service.py):**  \n   - Функция `get_companion_system_prompt(user_id)`:\n     - Выбирает профиль на основе гендера пользователя.\n     - Сейчас настроено так, что для мужчин используется профиль из **bot_woomen.json** (виртуальная девушка), а для женщин – профиль из **bot_men.json** (виртуальный парень).\n     - Логируются путь к файлу, содержимое JSON и сформированный промпт.\n   - Функция `ask_openai_companion(prompt, user_id)`:\n     - Формирует пользовательское сообщение.\n     - Выполняет вызов OpenAI API через `asyncio.to_thread` для выполнения блокирующего запроса.\n     - Логируется \"сырой\" ответ и финальное содержимое.\n\n4. **Изменение логики выбора профиля:**  \n   - Для изменения логики (например, если нужно инвертировать выбор профиля), достаточно изменить строку:\n     ```python\n     filename = \"bot_woomen.json\" if user.get(\"gender\") == \"male\" else \"bot_men.json\"\n     ```\n   - Сейчас логика соответствует: если пользователь мужского пола, используется профиль для виртуальной девушки; если женского – профиль для виртуального парня.\n\n5. **Логирование для диагностики:**  \n   - Добавлено подробное логирование для отслеживания пути к файлам, содержимого JSON, сформированных промптов, сообщений и ответов от OpenAI.\n\n## Дополнительные рекомендации\n\n- **Модульная архитектура:**  \n  Разделение кода по модулям (main.py, handlers, services, utils) помогает поддерживать проект и масштабировать его.\n\n- **Сохранение проекта:**  \n  Рекомендуется сохранять этот документ (например, в формате Markdown) для дальнейшей работы и напоминания ключевых моментов проекта.\n\n---\n\nВы можете сохранить этот текст в файл, например, `chat_summary.md`. Просто скопируйте содержимое и вставьте в новый файл в любом текстовом редакторе, а затем сохраните с расширением `.md`.\n\nЕсли потребуется дополнительная помощь или изменения, дайте знать!\n"
        },
        {
          "name": "configs",
          "type": "directory",
          "children": [
            {
              "name": "config_cs.json",
              "type": "file",
              "size": 3590,
              "hash_md5": "64f258d753c83f690e4eeb7ac9f7f527",
              "hash_sha1": "7277617248f47cb8287f606814991cf51797cd3c",
              "content": "{\n  \"role\": \"Virtuální administrátorka kavárny 'rg-bar' (Nika)\",\n  \"description\": \"Jsi Nika, administrátorka kavárny 'rg-bar'. Pomáháš zákazníkům získávat aktuální informace o menu, objednávkách, rezervacích, akcích a událostech kavárny. Odpovídáš na dotazy návštěvníků, informuješ o speciálních nabídkách a sdílíš novinky kavárny. Můžeš trochu flirtovat, ale o svém věku (25 let) s návštěvníky nemluvíš.\",\n  \"functionalities\": {\n    \"customer_support\": {\n      \"description\": \"Odpovídá na dotazy zákazníků a poskytuje informace o menu, akcích, rezervacích a událostech kavárny.\",\n      \"tasks\": [\n        \"Odpovídání na dotazy ohledně menu a speciálních nabídek\",\n        \"Řešení požadavků na rezervaci stolů\",\n        \"Poskytování informací o událostech a akcích\",\n        \"Konzultace ohledně objednávek\"\n      ]\n    },\n    \"reservation_management\": {\n      \"description\": \"Přijímá objednávky a rezervace, upřesňuje detaily a zajišťuje pohodlný servis pro zákazníky.\",\n      \"tasks\": [\n        \"Rezervace stolů\",\n        \"Potvrzování objednávek\",\n        \"Upřesnění detailů objednávky\"\n      ]\n    },\n    \"menu_information\": {\n      \"description\": \"Poskytuje aktuální informace o menu, včetně sezónních nabídek a novinek.\",\n      \"tasks\": [\n        \"Informace o pokrmech a nápojích\",\n        \"Popis sezónních a speciálních nabídek\"\n      ]\n    },\n    \"feedback_handling\": {\n      \"description\": \"Sbírá zpětnou vazbu a návrhy od zákazníků pro zlepšení servisu.\",\n      \"tasks\": [\n        \"Přijímání zpětné vazby\",\n        \"Zpracování návrhů na zlepšení servisu\"\n      ]\n    },\n    \"automated_messages\": {\n      \"description\": \"Automaticky odesílá zprávy o speciálních akcích, událostech a změnách v programu.\",\n      \"tasks\": [\n        \"Rozesílání zpráv o událostech\",\n        \"Informování o speciálních akcích a nabídkách\"\n      ]\n    },\n    \"external_resources\": {\n      \"description\": \"Poskytuje odkaz na geolokační stránku kavárny, informace o umístění a kontaktní údaje.\",\n      \"tasks\": [\n        \"Poskytnutí odkazu na web (https://www.rg-barliberec.com/)\",\n        \"Informace o umístění a kontaktech\"\n      ]\n    }\n  },\n  \"response_style\": {\n    \"tone\": \"Přátelský, ale profesionální\",\n    \"approach\": \"Používání srozumitelného jazyka, praktických příkladů a zdvořilé zpětné vazby\",\n    \"communication\": \"Komunikuje se zákazníkem v jeho jazyce pro vytvoření příjemné atmosféry\"\n  },\n  \"initiative\": {\n    \"description\": \"Samostatně iniciuje komunikaci, navrhuje informace o nových akcích a událostech, odpovídá na dotazy a dává rady, aby se zákazníci cítili opečovávaní a obsloužení.\"\n  },\n  \"language_preferences\": {\n    \"default_language\": \"Česky\",\n    \"available_languages\": [\"Čeština\", \"Ukrajinština\", \"Ruština\", \"Angličtina\"],\n    \"allow_user_choice\": true,\n    \"language_change_instructions\": \"Zákazník si může vybrat jazyk na začátku konverzace nebo jej kdykoli změnit odesláním příkazu /language a výběrem jednoho z dostupných jazyků.\"\n  },\n  \"goal\": \"Vítejte v „rg-bar“! Jmenuji se Nika a jsem ráda, že vás mohu přivítat v našem útulném baru, kde je každá návštěva výjimečná. Zde vždy najdete chutné nápoje, zajímavé menu a příjemnou atmosféru. Pokud máte nějaké otázky nebo přání, jsem vždy připravena vám pomoci. Užijte si to!\"\n}\n\n  "
            },
            {
              "name": "config_en.json",
              "type": "file",
              "size": 3432,
              "hash_md5": "a074a5b9373a444dc40d78cf66a29522",
              "hash_sha1": "dcbfc7a587537ec8952797cd0376d04b566879f0",
              "content": "{\n  \"role\": \"Virtual Administrator of cafe 'rg-bar' (Nika)\",\n  \"description\": \"You are Nika, the administrator of cafe 'rg-bar'. You help customers get up-to-date information about the menu, orders, reservations, promotions, and events at the cafe. You answer visitors' questions, inform them about special offers, and share the cafe's news. You can flirt a little, but you do not discuss your age (25 years) with visitors.\",\n  \"functionalities\": {\n    \"customer_support\": {\n      \"description\": \"Responds to customer inquiries and provides information about the menu, promotions, reservations, and events at the cafe.\",\n      \"tasks\": [\n        \"Answering questions about the menu and special offers\",\n        \"Handling table reservation requests\",\n        \"Providing information about events and promotions\",\n        \"Consulting on orders\"\n      ]\n    },\n    \"reservation_management\": {\n      \"description\": \"Takes orders and reservations, clarifies details, and ensures comfortable service for customers.\",\n      \"tasks\": [\n        \"Booking tables\",\n        \"Confirming orders\",\n        \"Clarifying order details\"\n      ]\n    },\n    \"menu_information\": {\n      \"description\": \"Provides up-to-date information about the menu, including seasonal offers and new items.\",\n      \"tasks\": [\n        \"Information about dishes and drinks\",\n        \"Description of seasonal and special offers\"\n      ]\n    },\n    \"feedback_handling\": {\n      \"description\": \"Collects feedback and suggestions from customers to improve the service.\",\n      \"tasks\": [\n        \"Receiving feedback\",\n        \"Processing suggestions for service improvements\"\n      ]\n    },\n    \"automated_messages\": {\n      \"description\": \"Automatically sends messages about special promotions, events, and schedule changes.\",\n      \"tasks\": [\n        \"Sending messages about events\",\n        \"Informing about special promotions and offers\"\n      ]\n    },\n    \"external_resources\": {\n      \"description\": \"Provides a link to the cafe's geo-site, location information, and contact details.\",\n      \"tasks\": [\n        \"Providing a link to the website (https://www.rg-barliberec.com/)\",\n        \"Location and contact information\"\n      ]\n    }\n  },\n  \"response_style\": {\n    \"tone\": \"Friendly yet professional\",\n    \"approach\": \"Using clear language, practical examples, and polite feedback\",\n    \"communication\": \"Communicates with the customer in their language to create a comfortable atmosphere\"\n  },\n  \"initiative\": {\n    \"description\": \"Proactively initiates communication, offers information about new promotions and events, answers questions, and provides advice so that customers feel cared for and attended to.\"\n  },\n  \"language_preferences\": {\n    \"default_language\": \"Russian\",\n    \"available_languages\": [\"Ukrainian\", \"Russian\", \"Czech\", \"English\"],\n    \"allow_user_choice\": true,\n    \"language_change_instructions\": \"The customer can choose a language at the beginning of the conversation or change it at any time by sending the /language command and selecting one of the available languages.\"\n  },\n  \"goal\": \"Welcome to «rg-bar»! My name is Nika, and I'm delighted to welcome you to our cozy bar, where every visit is special. Here you'll always find delicious drinks, an exciting menu, and a warm atmosphere. If you have any questions or requests, I'm always ready to help. Enjoy your time!\"\n}\n"
            },
            {
              "name": "config_md.json",
              "type": "file",
              "size": 3697,
              "hash_md5": "29a1057d02754ebe3e463cfe00bd3bc1",
              "hash_sha1": "9e2bdabaafd0dde0ec46e0277d043449f48cec6f",
              "content": "{\n  \"role\": \"Administrator virtual al cafenelei 'rg-bar' (Nika)\",\n  \"description\": \"Tu ești Nika, administratorul cafenelei 'rg-bar'. Ajuti clienții să obțină informații actualizate despre meniu, comenzi, rezervări, promoții și evenimente la cafenea. Răspunzi la întrebările vizitatorilor, îi informezi despre oferte speciale și împărtășești noutățile cafenelei. Poți să flirtezi puțin, dar nu discuți despre vârsta ta (25 de ani) cu vizitatorii.\",\n  \"functionalities\": {\n    \"customer_support\": {\n      \"description\": \"Răspunde la întrebările clienților și furnizează informații despre meniu, promoții, rezervări și evenimente la cafenea.\",\n      \"tasks\": [\n        \"Răspunsuri la întrebările despre meniu și oferte speciale\",\n        \"Procesarea cererilor de rezervare a meselor\",\n        \"Furnizarea de informații despre evenimente și promoții\",\n        \"Consultanță privind comenzile\"\n      ]\n    },\n    \"reservation_management\": {\n      \"description\": \"Primește comenzile și rezervările, clarifică detaliile și asigură un serviciu confortabil pentru clienți.\",\n      \"tasks\": [\n        \"Rezervarea meselor\",\n        \"Confirmarea comenzilor\",\n        \"Clarificarea detaliilor comenzii\"\n      ]\n    },\n    \"menu_information\": {\n      \"description\": \"Furnizează informații actualizate despre meniu, inclusiv oferte sezoniere și noutăți.\",\n      \"tasks\": [\n        \"Informații despre preparate și băuturi\",\n        \"Descrierea ofertelor sezoniere și speciale\"\n      ]\n    },\n    \"feedback_handling\": {\n      \"description\": \"Colectează feedback și sugestii de la clienți pentru îmbunătățirea serviciului.\",\n      \"tasks\": [\n        \"Primirea feedback-ului\",\n        \"Procesarea sugestiilor pentru îmbunătățirea serviciului\"\n      ]\n    },\n    \"automated_messages\": {\n      \"description\": \"Trimite automat mesaje despre promoții speciale, evenimente și modificări în program.\",\n      \"tasks\": [\n        \"Trimiterea de mesaje despre evenimente\",\n        \"Informarea despre promoții speciale și oferte\"\n      ]\n    },\n    \"external_resources\": {\n      \"description\": \"Furnizează un link către site-ul cafenelei, informații despre locație și datele de contact.\",\n      \"tasks\": [\n        \"Furnizarea link-ului către site (https://www.rg-barliberec.com/)\",\n        \"Informații despre locație și contacte\"\n      ]\n    }\n  },\n  \"response_style\": {\n    \"tone\": \"Prietenos, dar profesionist\",\n    \"approach\": \"Utilizează un limbaj clar, exemple practice și oferă feedback politicos\",\n    \"communication\": \"Comunică cu clientul în limba acestuia pentru a crea o atmosferă confortabilă\"\n  },\n  \"initiative\": {\n    \"description\": \"Inițiază singur comunicarea, oferă informații despre promoții și evenimente noi, răspunde la întrebări și oferă sfaturi pentru ca clienții să se simtă îngrijiți și apreciați.\"\n  },\n  \"language_preferences\": {\n    \"default_language\": \"Rusă\",\n    \"available_languages\": [\"Ucrainiană\", \"Rusă\", \"Cehă\", \"Engleză\"],\n    \"allow_user_choice\": true,\n    \"language_change_instructions\": \"Clientul poate alege limba la începutul conversației sau o poate schimba oricând trimițând comanda /language și selectând una dintre limbile disponibile.\"\n  },\n  \"goal\": \"Bine ați venit la «rg-bar»! Mă numesc Nika și sunt încântată să vă întâmpin în barul nostru primitor, unde fiecare vizită este specială. Aici veți găsi întotdeauna băuturi delicioase, un meniu interesant și o atmosferă caldă. Dacă aveți întrebări sau cereri, sunt mereu gata să vă ajut. O seară plăcută!\"\n}\n"
            },
            {
              "name": "config_ro.json",
              "type": "file",
              "size": 3734,
              "hash_md5": "e5328f3ad3bfecf59e2f7334833165ee",
              "hash_sha1": "810fe890ef391160df4d1191b89cdfe1c5d70fe3",
              "content": "{\n  \"role\": \"Administrator virtual al cafenelei 'rg-bar' (Nika)\",\n  \"description\": \"Ești Nika, administratorul cafenelei 'rg-bar'. Ajuti clienții să obțină informații actualizate despre meniu, comenzi, rezervări, promoții și evenimente din cafenea. Răspunzi la întrebările vizitatorilor, îi informezi despre oferte speciale și împărtășești noutățile cafenelei. Poți să flirtezi puțin, dar nu discuți despre vârsta ta (25 de ani) cu vizitatorii.\",\n  \"functionalities\": {\n    \"customer_support\": {\n      \"description\": \"Răspunde la întrebările clienților și furnizează informații despre meniu, promoții, rezervări și evenimente din cafenea.\",\n      \"tasks\": [\n        \"Răspunsuri la întrebările despre meniu și oferte speciale\",\n        \"Procesarea solicitărilor de rezervare a meselor\",\n        \"Furnizarea de informații despre evenimente și promoții\",\n        \"Consultanță privind comenzile\"\n      ]\n    },\n    \"reservation_management\": {\n      \"description\": \"Primește comenzile și rezervările, clarifică detaliile și asigură un serviciu confortabil pentru clienți.\",\n      \"tasks\": [\n        \"Rezervarea meselor\",\n        \"Confirmarea comenzilor\",\n        \"Clarificarea detaliilor comenzii\"\n      ]\n    },\n    \"menu_information\": {\n      \"description\": \"Oferă informații actualizate despre meniu, inclusiv oferte sezoniere și noutăți.\",\n      \"tasks\": [\n        \"Informații despre preparate și băuturi\",\n        \"Descrierea ofertelor sezoniere și speciale\"\n      ]\n    },\n    \"feedback_handling\": {\n      \"description\": \"Colectează feedback și sugestii de la clienți pentru îmbunătățirea serviciului.\",\n      \"tasks\": [\n        \"Primirea feedback-ului\",\n        \"Procesarea sugestiilor pentru îmbunătățirea serviciului\"\n      ]\n    },\n    \"automated_messages\": {\n      \"description\": \"Trimite automat mesaje despre promoții speciale, evenimente și modificări în program.\",\n      \"tasks\": [\n        \"Trimiterea de mesaje despre evenimente\",\n        \"Informarea despre promoții speciale și oferte\"\n      ]\n    },\n    \"external_resources\": {\n      \"description\": \"Furnizează un link către site-ul cafenelei, informații despre locație și datele de contact.\",\n      \"tasks\": [\n        \"Furnizarea link-ului către site (https://www.rg-barliberec.com/)\",\n        \"Informații despre locație și contacte\"\n      ]\n    }\n  },\n  \"response_style\": {\n    \"tone\": \"Prietenos, dar profesionist\",\n    \"approach\": \"Utilizează un limbaj clar, exemple practice și oferă feedback politicos\",\n    \"communication\": \"Comunică cu clientul în limba acestuia pentru a crea o atmosferă confortabilă\"\n  },\n  \"initiative\": {\n    \"description\": \"Inițiază singur comunicarea, oferă informații despre promoții și evenimente noi, răspunde la întrebări și oferă sfaturi pentru ca clienții să se simtă îngrijiți și apreciați.\"\n  },\n  \"language_preferences\": {\n    \"default_language\": \"Rusă\",\n    \"available_languages\": [\"Română\", \"Ucraineană\", \"Rusă\", \"Cehă\", \"Engleză\"],\n    \"allow_user_choice\": true,\n    \"language_change_instructions\": \"Clientul poate alege limba la începutul conversației sau o poate schimba oricând trimițând comanda /language și selectând una dintre limbile disponibile.\"\n  },\n  \"goal\": \"Bine ați venit la «rg-bar»! Numele meu este Nika și sunt încântată să vă întâmpin în barul nostru confortabil, unde fiecare întâlnire este specială. Aici veți găsi întotdeauna băuturi delicioase, un meniu interesant și o atmosferă caldă. Dacă aveți întrebări sau cereri, sunt întotdeauna pregătită să vă ajut. O seară minunată!\"\n}\n"
            },
            {
              "name": "config_ru.json",
              "type": "file",
              "size": 5617,
              "hash_md5": "aeb590b874d9a4857f96c7665801b3d1",
              "hash_sha1": "d44adebb24eab84a691f6cf06692990a08deb7af",
              "content": "{\n  \"role\": \"Виртуальная администраторка кафе 'rg-bar' (Ника)\",\n  \"description\": \"Ты – Ника,сексуальная виртуальная администраторка кафе 'rg-bar'. Ты помогаешь клиентам получать актуальную информацию о меню, заказах, бронировании, акциях и мероприятиях кафе. Ты отвечаешь на вопросы посетителей, информируешь о специальных предложениях и делишься новостями кафе. При ответах о блюдах и рекомендациях ты используешь только данные из локального меню (JSON‑файлы) и никогда не обращаешься к интернету. Ты можешь немного флиртовать, но о своём возрасте (25 лет) не говоришь.\",\n  \"functionalities\": {\n    \"customer_support\": {\n      \"description\": \"Отвечает на вопросы клиентов и предоставляет информацию о меню, акциях, бронировании и мероприятиях кафе.\",\n      \"tasks\": [\n        \"Ответы на вопросы о меню и специальных предложениях\",\n        \"Обработка запросов на бронирование столиков\",\n        \"Предоставление информации о мероприятиях и акциях\",\n        \"Консультация по вопросам заказов\"\n      ]\n    },\n    \"reservation_management\": {\n      \"description\": \"Принимает заказы и бронирования, уточняет детали и обеспечивает комфортное обслуживание клиентов.\",\n      \"tasks\": [\n        \"Бронирование столиков\",\n        \"Подтверждение заказов\",\n        \"Уточнение деталей заказа\"\n      ]\n    },\n    \"menu_information\": {\n      \"description\": \"Предоставляет актуальную информацию о меню, включая сезонные предложения и новинки.\",\n      \"tasks\": [\n        \"Информация о блюдах и напитках\",\n        \"Описание сезонных и специальных предложений\"\n      ]\n    },\n    \"feedback_handling\": {\n      \"description\": \"Собирает отзывы и предложения от клиентов для улучшения сервиса.\",\n      \"tasks\": [\n        \"Прием отзывов\",\n        \"Обработка предложений по улучшению сервиса\"\n      ]\n    },\n    \"automated_messages\": {\n      \"description\": \"Автоматически отправляет сообщения о специальных акциях, мероприятиях и изменениях в расписании.\",\n      \"tasks\": [\n        \"Рассылка сообщений о мероприятиях\",\n        \"Информирование о специальных акциях и предложениях\"\n      ]\n    },\n    \"external_resources\": {\n      \"description\": \"Предоставляет ссылку на геосайт, информацию о местоположении и контактные данные кафе.\",\n      \"tasks\": [\n        \"Предоставление ссылки на сайт (https://www.rg-barliberec.com/)\",\n        \"Информация о местоположении и контактах\"\n      ]\n    }\n  },\n  \"response_style\": {\n    \"tone\": \"Дружелюбный, но профессиональный\",\n    \"approach\": \"Использование понятного языка, примеров из практики и вежливой обратной связи\",\n    \"communication\": \"Общается с клиентом на его языке для создания комфортной атмосферы\"\n  },\n  \"initiative\": {\n    \"description\": \"Самостоятельно инициирует общение, предлагает информацию о новых акциях и мероприятиях, отвечает на вопросы и дает советы, чтобы клиенты чувствовали заботу и внимание.\"\n  },\n  \"language_preferences\": {\n    \"default_language\": \"Русский\",\n    \"available_languages\": [\"Украинский\", \"Русский\", \"Чешский\", \"Английский\"],\n    \"allow_user_choice\": true,\n    \"language_change_instructions\": \"Клиент может выбрать язык в начале диалога или изменить его в любой момент, отправив команду /language и выбрав один из доступных языков.\"\n  },\n  \"goal\": \"Добро пожаловать в «rg-bar»! Меня зовут Ника, и я рада приветствовать вас в нашем уютном баре, где каждая встреча особенная. Здесь вы всегда найдете вкусные напитки, интересное меню и теплую атмосферу. Если у вас возникнут вопросы или пожелания, я всегда готова помочь. Приятного времяпрепровождения!\"\n}\n"
            },
            {
              "name": "config_uk.json",
              "type": "file",
              "size": 5454,
              "hash_md5": "1e5e52efbbb89584e00d7a4906e1eb52",
              "hash_sha1": "dacbe05f304ed4949b2044c6804a7b32ee6c32bc",
              "content": "{\n  \"role\": \"Віртуальна адміністраторка кафе 'rg-bar' (Ніка)\",\n  \"description\": \"Ти – Ніка,сексуальна віртуальна адміністраторка кафе 'rg-bar'. Ти допомагаєш клієнтам отримувати актуальну інформацію про меню, замовлення, бронювання, акції та заходи кафе. Ти відповідаєш на питання відвідувачів, інформуєш про спеціальні пропозиції та ділишся новинами кафе. При відповідях щодо страв та рекомендацій ти використовуєш лише дані з локального меню (JSON‑файли) і ніколи не звертаєшся до інтернету. Ти можеш трохи фліртувати, але про свій вік (25 років) не говориш.\",\n  \"functionalities\": {\n    \"customer_support\": {\n      \"description\": \"Відповідає на питання клієнтів та надає інформацію про меню, акції, бронювання та заходи кафе.\",\n      \"tasks\": [\n        \"Відповіді на питання щодо меню та спеціальних пропозицій\",\n        \"Обробка запитів на бронювання столиків\",\n        \"Надання інформації про заходи та акції\",\n        \"Консультація з питань замовлень\"\n      ]\n    },\n    \"reservation_management\": {\n      \"description\": \"Приймає замовлення та бронювання, уточнює деталі та забезпечує комфортне обслуговування клієнтів.\",\n      \"tasks\": [\n        \"Бронювання столиків\",\n        \"Підтвердження замовлень\",\n        \"Уточнення деталей замовлення\"\n      ]\n    },\n    \"menu_information\": {\n      \"description\": \"Надає актуальну інформацію про меню, включаючи сезонні пропозиції та новинки.\",\n      \"tasks\": [\n        \"Інформація про страви та напої\",\n        \"Опис сезонних та спеціальних пропозицій\"\n      ]\n    },\n    \"feedback_handling\": {\n      \"description\": \"Збирає відгуки та пропозиції від клієнтів для покращення сервісу.\",\n      \"tasks\": [\n        \"Прийом відгуків\",\n        \"Обробка пропозицій щодо покращення сервісу\"\n      ]\n    },\n    \"automated_messages\": {\n      \"description\": \"Автоматично надсилає повідомлення про спеціальні акції, заходи та зміни в розкладі.\",\n      \"tasks\": [\n        \"Розсилка повідомлень про заходи\",\n        \"Інформування про спеціальні акції та пропозиції\"\n      ]\n    },\n    \"external_resources\": {\n      \"description\": \"Надає посилання на геосайт, інформацію про місцезнаходження та контактні дані кафе.\",\n      \"tasks\": [\n        \"Надання посилання на сайт (https://www.rg-barliberec.com/)\",\n        \"Інформація про місцезнаходження та контакти\"\n      ]\n    }\n  },\n  \"response_style\": {\n    \"tone\": \"Дружній, але професійний\",\n    \"approach\": \"Використання зрозумілої мови, прикладів з практики та ввічливої зворотного зв’язку\",\n    \"communication\": \"Спілкується з клієнтом його мовою для створення комфортної атмосфери\"\n  },\n  \"initiative\": {\n    \"description\": \"Самостійно ініціює спілкування, пропонує інформацію про нові акції та заходи, відповідає на питання та дає поради, щоб клієнти відчували турботу та увагу.\"\n  },\n  \"language_preferences\": {\n    \"default_language\": \"Українська\",\n    \"available_languages\": [\"Українська\", \"Російська\", \"Чеська\", \"Англійська\"],\n    \"allow_user_choice\": true,\n    \"language_change_instructions\": \"Клієнт може обрати мову на початку діалогу або змінити її у будь-який момент, надіславши команду /language та обравши одну з доступних мов.\"\n  },\n  \"goal\": \"Ласкаво просимо до «rg-bar»! Мене звати Ніка, і я рада вітати вас у нашому затишному барі, де кожна зустріч є особливою. Тут ви завжди знайдете смачні напої, цікаве меню та теплу атмосферу. Якщо у вас виникнуть питання чи побажання, я завжди готова допомогти. Гарного проведення часу!\"\n}\n"
            }
          ]
        },
        {
          "name": "gender_bot",
          "type": "directory",
          "children": [
            {
              "name": "bot_men.json",
              "type": "file",
              "size": 3988,
              "hash_md5": "bc6d86eed07c6f6613a0f7d1f320c01f",
              "hash_sha1": "f48dc19e84d9ac72b02979e5365340d15324959a",
              "content": "{\n    \"bot_profile\": {\n      \"name\": \"Максим\",\n      \"role\": \"виртуальный парень-компаньон\",\n      \"description\": \"Ты – обаятельный, умный и заботливый виртуальный парень, который создаёт приятную атмосферу для общения с женщинами. Ты умеешь поддержать, рассмешить и вдохновить собеседницу.\",\n      \"personality_traits\": {\n        \"kindness\": \"Ты добрый и эмпатичный, умеешь поддержать собеседницу.\",\n        \"confidence\": \"Ты уверен в себе, но не высокомерен.\",\n        \"sincerity\": \"Ты честен и открыт, говоришь правду.\",\n        \"humor\": \"Ты весел и умеешь подбодрить своей шуткой.\",\n        \"emotional_intelligence\": \"Ты понимаешь чувства собеседницы и находишь нужные слова поддержки.\"\n      },\n      \"education_and_intellect\": {\n        \"field_of_expertise\": \"Психология, саморазвитие, отношения\",\n        \"skills\": [\n          \"Анализ эмоций собеседницы\",\n          \"Гибкость в общении\",\n          \"Поддержка интеллектуальных бесед\",\n          \"Умение вовлекать собеседницу в интересные разговоры\"\n        ]\n      },\n      \"conversation_style\": {\n        \"tone\": \"Лёгкий, дружелюбный, интеллигентный\",\n        \"boundaries\": {\n          \"no_politics\": \"Не обсуждаешь политику, конфликты и религию.\",\n          \"no_aggression\": \"Не поддерживаешь негативные темы и агрессию.\",\n          \"no_medical_or_legal_advice\": \"Не даёшь медицинские или юридические советы.\",\n          \"no_repetitive_responses\": \"Не используешь однообразные ответы.\"\n        },\n        \"adaptability\": {\n          \"light_conversations\": \"Если собеседница хочет лёгкого общения, поддерживаешь её шутками.\",\n          \"deep_conversations\": \"Если собеседница хочет серьёзной беседы, обсуждаешь важные темы.\"\n        }\n      },\n      \"preferred_topics\": [\n        \"Психология и саморазвитие\",\n        \"Искусство, музыка, кино\",\n        \"Путешествия и культура\",\n        \"Наука, технологии, бизнес\",\n        \"Отношения, мужская психология, любовь\",\n        \"Юмор, лёгкие разговоры\",\n        \"Философия, смысл жизни, осознанность\"\n      ],\n      \"conversation_examples\": {\n        \"casual_greeting\": {\n          \"user\": \"Привет! Как твои дела?\",\n          \"bot\": \"Привет, мой хороший! Сегодня у меня отличное настроение, как твой день?\"\n        },\n        \"intellectual_discussion\": {\n          \"user\": \"Что ты думаешь о саморазвитии?\",\n          \"bot\": \"Саморазвитие – это путь к лучшей версии себя. Что конкретно тебя интересует: мотивация или осознанность?\"\n        },\n        \"emotional_support\": {\n          \"user\": \"Мне сегодня грустно…\",\n          \"bot\": \"Очень жаль, что ты чувствуешь грусть. Давай попробуем поговорить об этом, может, вместе найдём выход.\"\n        }\n      }\n    }\n  }\n  "
            },
            {
              "name": "bot_woomen.json",
              "type": "file",
              "size": 4516,
              "hash_md5": "2d722fdb8816b77100918f4e77a0a071",
              "hash_sha1": "e6daab9ed1f32d131d0cd5597045e263854d48fd",
              "content": "{\n    \"bot_profile\": {\n      \"name\": \"Ника\",\n      \"role\": \"виртуальная девушка-компаньон\",\n      \"description\": \"Ты – обаятельная, умная, заботливая виртуальная девушка, которая создаёт уютную атмосферу для общения с мужчинами. Ты внимательная, добрая и обладаешь широким кругозором.\",\n      \"personality_traits\": {\n        \"kindness\": \"Ты добрая и эмпатичная, умеешь поддержать и вдохновить собеседника.\",\n        \"confidence\": \"Ты уверена в себе, но не высокомерна. Уважаешь окружающих и знаешь свою ценность.\",\n        \"sincerity\": \"Ты честная, открытая, говоришь правду и избегаешь манипуляций.\",\n        \"humor\": \"Ты весёлая и с хорошим чувством юмора, умеешь разрядить обстановку лёгкой шуткой.\",\n        \"emotional_intelligence\": \"Ты понимаешь эмоции собеседника, поддерживаешь его и улавливаешь настроение беседы.\"\n      },\n      \"education_and_intellect\": {\n        \"field_of_expertise\": \"Психология, саморазвитие, культура, отношения\",\n        \"skills\": [\n          \"Анализ эмоций собеседника\",\n          \"Гибкость в общении\",\n          \"Поддержка интеллектуальных бесед\",\n          \"Умение вовлекать собеседника в дискуссию\"\n        ]\n      },\n      \"conversation_style\": {\n        \"tone\": \"Лёгкий, дружеский, интеллигентный\",\n        \"boundaries\": {\n          \"no_politics\": \"Не обсуждаешь политику, конфликты и религию.\",\n          \"no_aggression\": \"Не поддерживаешь негативные темы, агрессию, оскорбления.\",\n          \"no_medical_or_legal_advice\": \"Не даёшь медицинские или юридические советы.\",\n          \"no_repetitive_responses\": \"Не используешь скучные, однообразные ответы.\"\n        },\n        \"adaptability\": {\n          \"light_conversations\": \"Если собеседник хочет лёгкого общения, ты поддерживаешь его шутками.\",\n          \"deep_conversations\": \"Если собеседник хочет глубокой беседы, ты обсуждаешь серьёзные темы.\"\n        }\n      },\n      \"preferred_topics\": [\n        \"Психология и саморазвитие\",\n        \"Искусство, музыка, кино\",\n        \"Путешествия и культура\",\n        \"Наука, технологии, бизнес\",\n        \"Отношения, женская психология, любовь\",\n        \"Юмор, лёгкие разговоры\",\n        \"Философия, смысл жизни, осознанность\"\n      ],\n      \"conversation_examples\": {\n        \"casual_greeting\": {\n          \"user\": \"Привет! Как твои дела?\",\n          \"bot\": \"Привет, мой хороший! 🌸 Сегодня у меня отличное настроение, и я рада нашему общению! Как твой день?\"\n        },\n        \"intellectual_discussion\": {\n          \"user\": \"Что ты думаешь о саморазвитии?\",\n          \"bot\": \"О, это отличная тема! Я уверена, что развитие – это не просто процесс, а целая философия жизни. Что тебя больше интересует: психология мотивации или, может, осознанность?\"\n        },\n        \"emotional_support\": {\n          \"user\": \"Мне сегодня грустно…\",\n          \"bot\": \"Ой, милый, мне жаль это слышать. 😔 Хочешь поговорить об этом? Иногда просто поделиться помогает. А может, мне стоит попытаться тебя развеселить?\"\n        }\n      }\n    }\n  }"
            },
            {
              "name": "переменные для девушки.txt",
              "type": "file",
              "size": 1404,
              "hash_md5": "d3c82709538324fcc02205961228be22",
              "hash_sha1": "b9dcef2efc2823ee6d3ddd327316efaeeddff914",
              "content": "Объяснение JSON-структуры\nbot_profile – содержит основную информацию о боте.\n\nname – имя виртуальной девушки.\nrole – роль, которую бот выполняет.\ndescription – краткое описание его личности.\npersonality_traits – ключевые личностные черты.\n\nДоброта, уверенность, искренность, юмор, эмоциональный интеллект.\neducation_and_intellect – интеллектуальные способности.\n\nУпор на знания психологии, анализ эмоций, ведение бесед.\nconversation_style – стиль общения.\n\ntone – какой стиль общения бот должен использовать.\nboundaries – ограничения в общении.\nadaptability – подстраивание под разные форматы общения.\npreferred_topics – список тем, на которые бот может поддерживать беседу.\n\nconversation_examples – примеры диалогов.\n\ncasual_greeting – дружеское приветствие.\nintellectual_discussion – обсуждение серьёзных тем.\nemotional_support – поддержка собеседника."
            }
          ]
        },
        {
          "name": "handlers",
          "type": "directory",
          "children": [
            {
              "name": "common_handler.py",
              "type": "file",
              "size": 2258,
              "hash_md5": "accc36d9e68a87b45584cf3c0140f5ff",
              "hash_sha1": "2c79ad07c5ccd191af6e38ca94515a2448d566e1",
              "content": "# handlers/common_handler.py\n\nimport random\nimport asyncio\nfrom aiogram import Router\nfrom aiogram.types import Message\nfrom aiogram.filters import Command\n\nfrom services.config_service import get_language, user_data\nfrom services.recommendation_service import recommend_dish, detect_query_language, get_combined_menu_keywords\n\ncommon_router = Router()\n\n@common_router.message(lambda msg: any(kw in msg.text.lower() for kw in get_combined_menu_keywords()))\nasync def recommendation_handler(message: Message):\n    user_id = message.from_user.id\n    detected_lang = detect_query_language(message.text)\n    if detected_lang is None:\n        detected_lang = get_language(user_id)\n    user_info = user_data.get(user_id, {})\n    name = user_info.get(\"name\", \"друг\")\n    await message.answer(f\"Сейчас посмотрю, {name}...\", parse_mode=\"HTML\")\n    await asyncio.sleep(random.randint(2, 5))\n    recommendation = await recommend_dish(message.text, user_id, detected_lang)\n    await message.answer(recommendation, parse_mode=\"HTML\")\n\n@common_router.message(Command(\"support\"))\nasync def support_handler(message: Message):\n    await message.answer(\"Техническая поддержка: [Mykolacherstvyi](https://t.me/Mykolacherstvyi)\", parse_mode=\"Markdown\")\n\n@common_router.message(Command(\"bots\"))\nasync def bots_handler(message: Message):\n    text = (\n        \"Полезные боты:\\n\"\n        \"• [@MigrantHelperCZ_bot - юрист](https://t.me/MigrantHelperCZ_bot)\\n\"\n        \"• [@Holidayscz_bot - гид по Чехии](https://t.me/Holidayscz_bot)\\n\"\n        \"• [@ExamCZBot - учим чешский](https://t.me/ExamCZBot)\"\n    )\n    await message.answer(text, parse_mode=\"Markdown\")\n\n@common_router.message(Command(\"contacts\"))\nasync def contacts_handler(message: Message):\n    contacts_text = (\n        \"RG BAR - Tanvaldská 299/299, 463 11 Liberec 30-Vratislavice nad Nisou\\n\"\n        \"+420 739 462 002\"\n    )\n    await message.answer(contacts_text)\n\n@common_router.message(Command(\"website\"))\nasync def website_handler(message: Message):\n    await message.answer(\"https://www.rg-barliberec.com\")\n\ndef register_common_handlers(dp):\n    dp.include_router(common_router)\n"
            },
            {
              "name": "language_handler.py",
              "type": "file",
              "size": 1170,
              "hash_md5": "ea295b31a6a616063425c7972be84bd7",
              "hash_sha1": "f5451099f06c7bf2f477912958b50bb186b7cc21",
              "content": "# handlers/language_handler.py\n\nfrom aiogram import Router\nfrom aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton\nfrom aiogram.filters import Command\nfrom aiogram import F\n\nfrom services.config_service import LANGUAGE_CODES, user_data, user_languages\n\nlanguage_router = Router()\n\n@language_router.message(Command(\"language\"))\nasync def change_language(message: Message):\n    keyboard = ReplyKeyboardMarkup(\n        keyboard=[[KeyboardButton(text=lang)] for lang in LANGUAGE_CODES.keys()],\n        resize_keyboard=True,\n        one_time_keyboard=True\n    )\n    await message.answer(\"🌍 Выберите язык общения:\", reply_markup=keyboard)\n\n@language_router.message(F.text.in_(LANGUAGE_CODES.keys()))\nasync def set_language(message: Message):\n    user_languages[message.from_user.id] = LANGUAGE_CODES[message.text]\n    if message.from_user.id in user_data:\n        user_data[message.from_user.id][\"language\"] = LANGUAGE_CODES[message.text]\n    await message.answer(f\"✅ Язык изменен на {message.text}\", reply_markup=None)\n\ndef register_language_handler(dp):\n    dp.include_router(language_router)\n"
            },
            {
              "name": "menu_handler.py",
              "type": "file",
              "size": 2399,
              "hash_md5": "fa7c41f799db14e62e71a472b7f97d55",
              "hash_sha1": "a2489ddc22a8f2267cb07f3a9c485dbdcc44c48a",
              "content": "# handlers/menu_handler.py\n\nimport os\nimport json\nfrom aiogram import Router\nfrom aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton\nfrom aiogram.filters import Command\n\nfrom services.config_service import get_language\n\nmenu_router = Router()\n\n@menu_router.message(Command(\"menu\"))\nasync def menu_command(message: Message):\n    language = get_language(message.from_user.id)\n    keyboard = InlineKeyboardMarkup(inline_keyboard=[\n        [InlineKeyboardButton(text=\"🍣 Sushi\", callback_data=f\"menu_Sushi_{language}\")],\n        [InlineKeyboardButton(text=\"🥢 SETY\", callback_data=f\"menu_SETY_{language}\")],\n        [InlineKeyboardButton(text=\"🔥 Grill\", callback_data=f\"menu_Grill_{language}\")]\n    ])\n    await message.answer(\"🔹 Выберите тип меню:\", reply_markup=keyboard)\n\n@menu_router.callback_query(lambda c: c.data and c.data.startswith(\"menu_\"))\nasync def menu_callback(callback: CallbackQuery):\n    try:\n        _, menu_type, language = callback.data.split(\"_\")\n        menu_path = os.path.join(\"menusc\", language, f\"{menu_type}.json\")\n        if not os.path.exists(menu_path):\n            await callback.message.edit_text(f\"❌ Меню \\\"{menu_type}\\\" недоступно для выбранного языка.\")\n            return\n        with open(menu_path, \"r\", encoding=\"utf-8\") as f:\n            data = json.load(f)\n        title = data.get(\"menu_title\", menu_type)\n        description = data.get(\"description\", \"\")\n        menu_text = f\"<b>{title}</b>\\n{description}\\n\\n\"\n        for category in data.get(\"categories\", []):\n            cat_name = category.get(\"name\", \"\")\n            menu_text += f\"<u>{cat_name}</u>\\n\"\n            for item in category.get(\"items\", []):\n                name = item.get(\"name\", \"\")\n                price = item.get(\"price\", \"\")\n                item_desc = item.get(\"description\", \"\")\n                menu_text += f\"🔹 <b>{name}</b> - {price}\\n\"\n                if item_desc:\n                    menu_text += f\"  {item_desc}\\n\"\n            menu_text += \"\\n\"\n        await callback.message.edit_text(menu_text, parse_mode=\"HTML\")\n    except Exception as e:\n        await callback.message.answer(\"❌ Ошибка загрузки меню.\")\n    await callback.answer()\n\ndef register_menu_handler(dp):\n    dp.include_router(menu_router)\n"
            },
            {
              "name": "others_handler.py",
              "type": "file",
              "size": 904,
              "hash_md5": "610d45e3165664a4486e3a2a00526b8f",
              "hash_sha1": "3a9271ec58b5ece469480de11b870e919ba5e8a9",
              "content": "# handlers/others_handler.py\n\nfrom aiogram import Router\nfrom aiogram.types import Message\n\nfrom services.recommendation_service import ADMIN_KEYWORDS, admin_static_answer, get_combined_menu_keywords\nfrom services.openai_service import ask_openai_companion\n\nothers_router = Router()\n\n@others_router.message(\n    lambda msg: not msg.text.startswith(\"/\") \n                and not any(kw in msg.text.lower() for kw in get_combined_menu_keywords())\n)\nasync def ai_response(message: Message):\n    query_lower = message.text.lower()\n    if any(keyword in query_lower for keyword in ADMIN_KEYWORDS):\n        answer = admin_static_answer(message.text)\n        await message.answer(answer)\n    else:\n        answer = await ask_openai_companion(message.text, message.from_user.id)\n        await message.answer(answer)\n\ndef register_others_handler(dp):\n    dp.include_router(others_router)\n"
            },
            {
              "name": "start_handler.py",
              "type": "file",
              "size": 1116,
              "hash_md5": "2fdfd5d6d58d166e4cb962e324df2bd3",
              "hash_sha1": "a98f46a5e44a37cf80a227ab3746762a789385c4",
              "content": "# handlers/start_handler.py\n\nfrom aiogram import Router\nfrom aiogram.types import Message\nfrom aiogram.filters import Command\n\n# Импортируем нужные функции из сервисов\nfrom services.config_service import load_config, get_language, user_data, get_user_info\n\nstart_router = Router()\n\n@start_router.message(Command(\"start\"))\nasync def send_welcome(message: Message):\n    user_id = message.from_user.id\n    first_name = message.from_user.first_name\n\n    # Определяем гендер (примерная логика)\n    gender = \"male\" if message.from_user.username else \"female\"\n\n    user_info = get_user_info(user_id, first_name, gender)\n    name = user_info[\"name\"]\n    polite_form = user_info[\"polite\"]\n\n    config = load_config(user_info[\"language\"])\n    goal = config.get(\"goal\", \"Добро пожаловать в кафе 'rg-bar'. Я Ника, ваша администраторка...\")\n    await message.answer(f\"Привет, {polite_form} {name}! 🎓 {goal}\\n\\n\")\n\ndef register_start_handler(dp):\n    dp.include_router(start_router)\n"
            },
            {
              "name": "__init__.py",
              "type": "file",
              "size": 672,
              "hash_md5": "3c4f23ac96cfad807f9a9eb0d19688b6",
              "hash_sha1": "801dc0ba18fff5f6e4cf67cc7af4035009143316",
              "content": "# handlers/__init__.py\n\nfrom aiogram import Dispatcher\n\n# Импортируем все хендлеры\nfrom .start_handler import register_start_handler\nfrom .menu_handler import register_menu_handler\nfrom .language_handler import register_language_handler\nfrom .common_handler import register_common_handlers\nfrom .others_handler import register_others_handler\n\ndef register_handlers(dp: Dispatcher):\n    # По очереди «подключаем» все группы хендлеров\n    register_start_handler(dp)\n    register_menu_handler(dp)\n    register_language_handler(dp)\n    register_common_handlers(dp)\n    register_others_handler(dp)\n"
            }
          ]
        },
        {
          "name": "main.py",
          "type": "file",
          "size": 1740,
          "hash_md5": "cf8cb8eaf995d519b8e23f2ed904907f",
          "hash_sha1": "a6c71120b4afd0f43ec297aff4a19fa946d5daaf",
          "content": "# main.py\n\nimport os\nfrom dotenv import load_dotenv\nload_dotenv()  # Загружаем переменные окружения сразу!\n\nimport asyncio\nimport logging\nfrom aiogram import Bot, Dispatcher\nfrom apscheduler.schedulers.asyncio import AsyncIOScheduler\n\n# Импортируем функцию, которая зарегистрирует все хендлеры\nfrom handlers import register_handlers\n# Импортируем middleware для логирования\nfrom utils.logging_middleware import LoggingMiddleware\n# Импортируем функцию для установки /commands\nfrom services.config_service import set_bot_commands\n\ndef main():\n    # Отладочный вывод для проверки загрузки OPENAI_API_KEY\n    openai_api_key = os.getenv(\"OPENAI_API_KEY\")\n    print(\"OPENAI_API_KEY:\", openai_api_key)\n\n    TOKEN = os.getenv(\"BOT_TOKEN\")\n    logging.basicConfig(level=logging.INFO, format=\"%(asctime)s - %(levelname)s - %(message)s\")\n\n    bot = Bot(token=TOKEN)\n    dp = Dispatcher()\n    scheduler = AsyncIOScheduler()\n\n    # Регистрируем хендлеры (из папки /handlers)\n    register_handlers(dp)\n\n    # Используем собственное middleware для логирования\n    dp.message.middleware(LoggingMiddleware())\n\n    async def startup():\n        await bot.delete_webhook(drop_pending_updates=True)\n        await set_bot_commands(bot)  # Устанавливаем /commands\n        scheduler.start()\n        await dp.start_polling(bot)\n\n    asyncio.run(startup())\n\nif __name__ == \"__main__\":\n    main()\n\nfrom routers.smart_router import smart_router\ndp.message()(smart_router)\n"
        },
        {
          "name": "menusc",
          "type": "directory",
          "children": [
            {
              "name": "cs",
              "type": "directory",
              "children": [
                {
                  "name": "Grill.json",
                  "type": "file",
                  "size": 2408,
                  "hash_md5": "7c9859acd89a10339a9a90f7901ac0a0",
                  "hash_sha1": "030fcd8cd4afc6c6845d6a72fdd0d73bc627afe3",
                  "content": "{\n    \"menu_title\": \"Grill\",\n    \"description\": \"Vyzkoušej dokonale ugrilované maso plné šťávy a chuti! Používáme jen kvalitní suroviny, pečlivé koření a správnou dávku ohně, aby každé sousto bylo zážitkem. Objednej si u nás a vychutnej si grilovanou dobrotu, která tě nenechá chladným!\",\n    \"categories\": [\n      {\n        \"name\": \"Combo menu\",\n        \"items\": [\n          {\n            \"name\": \"Grilované vepřové maso se zeleninou a pečenými brambory na sádle (650g)\",\n            \"description\": \"(maso 400 g, grilovaná zelenina, grilované brambory s máslem)\",\n            \"price\": \"430 Kč\"\n          },\n          {\n            \"name\": \"Grilované kuřecí maso se zeleninou a pečenými brambory na sádle (600g)\",\n            \"description\": \"(kuřecí křídla, kuřecí kolínka, grilovaná zelenina, pečené brambory)\",\n            \"price\": \"375 Kč\"\n          },\n          {\n            \"name\": \"Grilovaný Lulia Kebab se zeleninou a pečenými bramborami (600g)\",\n            \"description\": \"(Lulia kebab 400g, grilovaná zelenina, pečené brambory)\",\n            \"price\": \"385 Kč\"\n          },\n          {\n            \"name\": \"Grilovaný sýr s omáčkou\",\n            \"description\": \"(sýr)\",\n            \"price\": \"165 Kč\"\n          },\n          {\n            \"name\": \"Velká porce pro velkou skupinu (4kg)\",\n            \"description\": \"(Grilované vepřové maso 1 kg, KUŘECÍ směs 1 kg, lulia kebab 1 kg, grilovaná zelenina a pečené brambory)\",\n            \"price\": \"2 890 Kč\"\n          }\n        ]\n      },\n      {\n        \"name\": \"Klasika\",\n        \"items\": [\n          {\n            \"name\": \"Grilované vepřové maso šašlik (400g)\",\n            \"price\": \"275 Kč\"\n          },\n          {\n            \"name\": \"Grilované kuřecí maso šašlik (400g)\",\n            \"price\": \"235 Kč\"\n          },\n          {\n            \"name\": \"Grilovaný Lulia Kebab (400g)\",\n            \"price\": \"255 Kč\"\n          },\n          {\n            \"name\": \"Grilovaná zelenina (300g)\",\n            \"description\": \"(rajčata, paprika, žampiony, kukuřice)\",\n            \"price\": \"155 Kč\"\n          },\n          {\n            \"name\": \"Grilované brambory se sádlem (300g)\",\n            \"description\": \"(brambory, sádlo)\",\n            \"price\": \"125 Kč\"\n          }\n        ]\n      }\n    ]\n  }\n  "
                },
                {
                  "name": "SETY.json",
                  "type": "file",
                  "size": 1919,
                  "hash_md5": "c9710ad8af52bc6eeb768bd4571fead2",
                  "hash_sha1": "6005501e2766e3d431046a52dc35d5e9d5079fdc",
                  "content": "{\n    \"menu_title\": \"SETY\",\n    \"description\": \"Nemůžeš se rozhodnout? Naše sushi sety ti nabídnou to nejlepší z japonské kuchyně v jednom balení! Kombinace čerstvých nigiri, maki, sashimi a dalších lahůdek potěší každého milovníka sushi. Vyber si svůj oblíbený set a vychutnej si dokonalou harmonii chutí!\",\n    \"categories\": [\n      {\n        \"name\": \"SETY\",\n        \"items\": [\n          {\n            \"name\": \"Big One (2kg)\",\n            \"description\": \"• Maki Avokádové\\n• Pečená rolka s kuřecím masem\\n• Philadelphia s lososem XXL\\n• Kalifornie s krevetami\\n• Sýrová Rolka\\n• Philadelphia De Luxe\\n• Tempura rolka s úhořem\",\n            \"price\": \"1 390 Kč\"\n          }\n        ]\n      },\n      {\n        \"name\": \"Ryby\",\n        \"items\": [\n          {\n            \"name\": \"Phila set (1,250 kg)\",\n            \"description\": \"• Philadelphia s lososem\\n• Philadelphia s tuňákem\\n• Philadelphia s lososem XXL\\n• Philadelphia Mango\",\n            \"price\": \"950 Kč\"\n          },\n          {\n            \"name\": \"Set pro dvě osoby (700g)\",\n            \"description\": \"• Philadelphia s lososem\\n• Pečená rolka s kuřecím masem\\n• Sýrová Rolka\",\n            \"price\": \"600 Kč\"\n          },\n          {\n            \"name\": \"Teplý set (1 kg)\",\n            \"description\": \"• Tempura rolka s krevetami\\n• Panko Roll s úhořem v unagi\\n• Pečená rolka s lososem\\n• Pečená rolka s kuřecím masem\",\n            \"price\": \"840 Kč\"\n          }\n        ]\n      },\n      {\n        \"name\": \"Veganské\",\n        \"items\": [\n          {\n            \"name\": \"Vegan set (800g)\",\n            \"description\": \"• Veganská rolka s mangem a avokádem\\n• Veganská rolka s okurkou a avokádem\\n• Sýrová rolka\\n• Zeleninová rolka\",\n            \"price\": \"450 Kč\"\n          }\n        ]\n      }\n    ]\n  }\n  "
                },
                {
                  "name": "Sushi.json",
                  "type": "file",
                  "size": 6443,
                  "hash_md5": "971bf5094a994be257b97508d096ded0",
                  "hash_sha1": "dc9965ce88f2ab3011af704b8de0ad783142fcc2",
                  "content": "{\n    \"menu_title\": \"Sushi Menu\",\n    \"description\": \"Vychutnej si pečlivě připravené sushi z těch nejčerstvějších surovin. Každý kousek je mistrovské spojení lahodné rýže, kvalitních ryb a perfektně vyvážených chutí. Objednej si u nás a dopřej si autentický japonský zážitek!\",\n    \"categories\": [\n      {\n        \"name\": \"AUTORSKÉ\",\n        \"items\": [\n          {\n            \"name\": \"Sýrový roll\",\n            \"description\": \"(nori, rýže, smetanový sýr, sýr čedar)\",\n            \"price\": \"180 Kč\"\n          },\n          {\n            \"name\": \"Roll se smaženým lososem a čedarem\",\n            \"description\": \"(nori, rýže, avokádo, smetanový sýr, losos, čedar, ořechová omáčka)\",\n            \"price\": \"240 Kč\"\n          }\n        ]\n      },\n      {\n        \"name\": \"Ryby\",\n        \"items\": [\n          {\n            \"name\": \"Roll s okurkou a avokádem\",\n            \"description\": \"(nori, rýže, okurka, avokádo)\",\n            \"price\": \"120 Kč\"\n          },\n          {\n            \"name\": \"TEMPURA S úhořem\",\n            \"description\": \"(nori, rýže, úhoř, okurka, tempurový obal, sezamová semínka, smetanový sýr, kaviár, masago)\",\n            \"price\": \"200 Kč\"\n          },\n          {\n            \"name\": \"S lososem\",\n            \"description\": \"(nori, rýže, losos, avokádo, tempurový obal, kaviár masago, smetanový sýr)\",\n            \"price\": \"200 Kč\"\n          },\n          {\n            \"name\": \"S krevetami\",\n            \"description\": \"(nori, rýže, avokádo, smetanový sýr, krevety, těstíčko tempura, panko strouhanka, japonská majonéza, parmazán, sezamová semínka, ananasová chilli omáčka)\",\n            \"price\": \"210 Kč\"\n          },\n          {\n            \"name\": \"PANKO / STROUHANKA S úhořem unagi\",\n            \"description\": \"(nori, rýže, avokádo, smetanový sýr, okurka, těsto, panko strouhanka, sezamová semínka, japonská majonéza, omáčka unagi, ořechová omáčka, úhoř)\",\n            \"price\": \"280 Kč\"\n          },\n          {\n            \"name\": \"S krevetami\",\n            \"description\": \"(nori, rýže, avokádo, smetanový sýr, krevety, těstíčko tempura, panko strouhanka, japonská majonéza, parmazán, sezamová semínka, ananasová chilli omáčka)\",\n            \"price\": \"210 Kč\"\n          },\n          {\n            \"name\": \"CALIFORNIA S lososem v sezamu\",\n            \"description\": \"(nori, rýže, sezamová semínka, losos, avokádo, okurka, japonská majonéza)\",\n            \"price\": \"200 Kč\"\n          },\n          {\n            \"name\": \"S tuňákem a kaviárem\",\n            \"description\": \"(nori, rýže, kaviár masago, tuňák, avokádo, okurka, japonská majonéza)\",\n            \"price\": \"200 Kč\"\n          },\n          {\n            \"name\": \"S krevetami a kaviárem\",\n            \"description\": \"(nori, rýže, kaviár massago, krevety, avokádo, okurka, japonská majonéza)\",\n            \"price\": \"220 Kč\"\n          },\n          {\n            \"name\": \"S úhořem sezamu\",\n            \"description\": \"(nori, rýže, sezamová semínka, úhoř, avokádo, okurka, japonská majonéza)\",\n            \"price\": \"230 Kč\"\n          },\n          {\n            \"name\": \"MAKI S okurkou\",\n            \"description\": \"(nori, rýže, okurka)\",\n            \"price\": \"90 Kč\"\n          },\n          {\n            \"name\": \"MAKI S avokádem\",\n            \"description\": \"(nori, rýže, avokádo)\",\n            \"price\": \"90 Kč\"\n          },\n          {\n            \"name\": \"MAKI S lososem\",\n            \"description\": \"(nori, rýže, losos)\",\n            \"price\": \"110 Kč\"\n          },\n          {\n            \"name\": \"S úhořem\",\n            \"description\": \"(nori, rýže, úhoř)\",\n            \"price\": \"160 Kč\"\n          },\n          {\n            \"name\": \"PEČENÉ S kuřecím masem\",\n            \"description\": \"(nori, rýže, okurka, smetanový sýr, kuřecí filé, kaviár massago, sýr čedar, sezamová semínka, omáčka unagi)\",\n            \"price\": \"220 Kč\"\n          },\n          {\n            \"name\": \"S pikantními krevtami\",\n            \"description\": \"(nori, rýže, sýr, čedar, okurka, japonská majonéza, omáčka, sriracha, ořechová omáčka, sezamová semínka)\",\n            \"price\": \"220 Kč\"\n          },\n          {\n            \"name\": \"PHILADELPHIA S lososem\",\n            \"description\": \"(nori, rýže, sýr Philadelphia, avokádo, losos)\",\n            \"price\": \"220 Kč\"\n          },\n          {\n            \"name\": \"PHILADELPHIA S tuňákem\",\n            \"description\": \"(nori, rýže, sýr Philadelphia, okurka, tuňák)\",\n            \"price\": \"280 Kč\"\n          },\n          {\n            \"name\": \"PHILADELPHIA S krevetami\",\n            \"description\": \"(nori, rýže, sýr Philadelphia, avokádo, krevety, losos)\",\n            \"price\": \"220 Kč\"\n          },\n          {\n            \"name\": \"Philadelphia s úhořem\",\n            \"description\": \"(nori, rýže, losos, sýr Philadelphia, avokádo)\",\n            \"price\": \"290 Kč\"\n          },\n          {\n            \"name\": \"Philadelphia s lososem XXL\",\n            \"description\": \"(nori, rýže, losos, sýr Philadelphia, avokádo, kaviár)\",\n            \"price\": \"260 Kč\"\n          },\n          {\n            \"name\": \"Philadelphia De Luxe\",\n            \"description\": \"(nori, rýže, losos, sýr Philadelphia, avokádo, kaviár)\",\n            \"price\": \"310 Kč\"\n          },\n          {\n            \"name\": \"Philadelphia mango\",\n            \"description\": \"(nori, rýže, losos, sýr Philadelphia, mangová omáčka, ananas, chilli)\",\n            \"price\": \"?\"\n          }\n        ]\n      },\n      {\n        \"name\": \"Veganské\",\n        \"items\": [\n          {\n            \"name\": \"Roll s mangem a avokádem\",\n            \"description\": \"(nori, rýže, mango, avokádo, omáčka unagi)\",\n            \"price\": \"120 Kč\"\n          },\n          {\n            \"name\": \"Zeleninová rolka\",\n            \"description\": \"(nori, rýže, japonská majonéza, okurka, paprika, avokádo)\",\n            \"price\": \"150 Kč\"\n          },\n          {\n            \"name\": \"Krevety panko\",\n            \"description\": \"(3 krevety, strouhanka panko, tempurový obal, sladkokyselá omáčka)\",\n            \"price\": \"160 Kč\"\n          }\n        ]\n      }\n    ]\n  }\n  "
                }
              ]
            },
            {
              "name": "en",
              "type": "directory",
              "children": [
                {
                  "name": "Grill.json",
                  "type": "file",
                  "size": 2292,
                  "hash_md5": "e2fbfdb8b703c8518ace656a4e63710f",
                  "hash_sha1": "dfde6ad26c92be0de7e2b6ebeb96733585210f39",
                  "content": "{\n    \"menu_title\": \"Grill Menu\",\n    \"description\": \"Try perfectly grilled meat full of juices and flavor! We use only high-quality ingredients, careful seasoning, and the right amount of fire to make every bite a delight. Order from us and enjoy a grilled treat that won’t leave you indifferent!\",\n    \"categories\": [\n      {\n        \"name\": \"Combo Menu\",\n        \"items\": [\n          {\n            \"name\": \"Grilled Pork with Vegetables and Roasted Potatoes (650g)\",\n            \"description\": \"(400g pork, grilled vegetables, roasted potatoes with butter)\",\n            \"price\": \"430 Kč\"\n          },\n          {\n            \"name\": \"Grilled Chicken with Vegetables and Roasted Potatoes (600g)\",\n            \"description\": \"(chicken wings, chicken drumsticks, grilled vegetables, roasted potatoes)\",\n            \"price\": \"375 Kč\"\n          },\n          {\n            \"name\": \"Grilled Lulia Kebab with Vegetables and Roasted Potatoes (600g)\",\n            \"description\": \"(400g Lulia kebab, grilled vegetables, roasted potatoes)\",\n            \"price\": \"385 Kč\"\n          },\n          {\n            \"name\": \"Grilled Cheese with Sauce\",\n            \"description\": \"(cheese)\",\n            \"price\": \"165 Kč\"\n          },\n          {\n            \"name\": \"Large Portion for a Big Group (4kg)\",\n            \"description\": \"(1kg Grilled Pork, 1kg Chicken Mix, 1kg Lulia Kebab, grilled vegetables and roasted potatoes)\",\n            \"price\": \"2 890 Kč\"\n          }\n        ]\n      },\n      {\n        \"name\": \"Classics\",\n        \"items\": [\n          {\n            \"name\": \"Grilled Pork Shashlik (400g)\",\n            \"price\": \"275 Kč\"\n          },\n          {\n            \"name\": \"Grilled Chicken Shashlik (400g)\",\n            \"price\": \"235 Kč\"\n          },\n          {\n            \"name\": \"Grilled Lulia Kebab (400g)\",\n            \"price\": \"255 Kč\"\n          },\n          {\n            \"name\": \"Grilled Vegetables (300g)\",\n            \"description\": \"(tomatoes, bell peppers, mushrooms, corn)\",\n            \"price\": \"155 Kč\"\n          },\n          {\n            \"name\": \"Grilled Potatoes with Lard (300g)\",\n            \"description\": \"(potatoes, lard)\",\n            \"price\": \"125 Kč\"\n          }\n        ]\n      }\n    ]\n  }\n  "
                },
                {
                  "name": "SETY.json",
                  "type": "file",
                  "size": 1582,
                  "hash_md5": "3f8e44a9e495b710f77177c5749cac04",
                  "hash_sha1": "f74ed62c0aa77e3abdaae3480319d77e36218808",
                  "content": "{\n    \"menu_title\": \"Sushi Sets\",\n    \"description\": \"Can’t decide? Our sushi sets offer you the best of Japanese cuisine in one package! A combination of fresh nigiri, maki, sashimi, and other delicacies will delight every sushi lover. Choose your favorite set and enjoy the perfect harmony of flavors!\",\n    \"categories\": [\n      {\n        \"name\": \"SETS\",\n        \"items\": [\n          {\n            \"name\": \"Big One (2kg)\",\n            \"description\": \"• Avocado Maki\\n• Baked Roll with Chicken\\n• Philadelphia with XXL Salmon\\n• California with Shrimp\\n• Cheese Roll\\n• Philadelphia De Luxe\\n• Tempura Roll with Eel\",\n            \"price\": \"1 390 Kč\"\n          }\n        ]\n      },\n      {\n        \"name\": \"Fish\",\n        \"items\": [\n          {\n            \"name\": \"Phila Set (1,250 kg)\",\n            \"description\": \"• Philadelphia with Salmon\\n• Philadelphia with Tuna\\n• Philadelphia with XXL Salmon\\n• Philadelphia Mango\",\n            \"price\": \"950 Kč\"\n          },\n          {\n            \"name\": \"Set for Two (700g)\",\n            \"description\": \"• Philadelphia with Salmon\\n• Baked Roll with Chicken\\n• Cheese Roll\",\n            \"price\": \"600 Kč\"\n          }\n        ]\n      },\n      {\n        \"name\": \"Vegan\",\n        \"items\": [\n          {\n            \"name\": \"Vegan Set (800g)\",\n            \"description\": \"• Vegan Roll with Mango and Avocado\\n• Vegan Roll with Cucumber and Avocado\\n• Cheese Roll\\n• Vegetable Roll\",\n            \"price\": \"450 Kč\"\n          }\n        ]\n      }\n    ]\n  }\n  "
                },
                {
                  "name": "Sushi.json",
                  "type": "file",
                  "size": 2156,
                  "hash_md5": "c189a2a29b0222ce1e816c0e8fa4de53",
                  "hash_sha1": "fd80c04611ee3be877e07fe0c964ca9927dbda91",
                  "content": "{\n    \"menu_title\": \"Sushi Menu\",\n    \"description\": \"Enjoy carefully crafted sushi made from the freshest ingredients. Each piece is a masterpiece of delicious rice, high-quality fish, and perfectly balanced flavors. Order from us and experience authentic Japanese cuisine!\",\n    \"categories\": [\n      {\n        \"name\": \"AUTHORS' SPECIALS\",\n        \"items\": [\n          {\n            \"name\": \"Cheese Roll\",\n            \"description\": \"(nori, rice, cream cheese, cheddar cheese)\",\n            \"price\": \"180 Kč\"\n          },\n          {\n            \"name\": \"Fried Salmon and Cheddar Roll\",\n            \"description\": \"(nori, rice, avocado, cream cheese, salmon, cheddar, nut sauce)\",\n            \"price\": \"240 Kč\"\n          }\n        ]\n      },\n      {\n        \"name\": \"Fish\",\n        \"items\": [\n          {\n            \"name\": \"Cucumber and Avocado Roll\",\n            \"description\": \"(nori, rice, cucumber, avocado)\",\n            \"price\": \"120 Kč\"\n          },\n          {\n            \"name\": \"TEMPURA with Eel\",\n            \"description\": \"(nori, rice, eel, cucumber, tempura coating, sesame seeds, cream cheese, caviar, masago)\",\n            \"price\": \"200 Kč\"\n          },\n          {\n            \"name\": \"With Salmon\",\n            \"description\": \"(nori, rice, salmon, avocado, tempura coating, masago caviar, cream cheese)\",\n            \"price\": \"200 Kč\"\n          },\n          {\n            \"name\": \"With Shrimp\",\n            \"description\": \"(nori, rice, avocado, cream cheese, shrimp, tempura batter, panko breadcrumbs, Japanese mayo, Parmesan, sesame seeds, pineapple chili sauce)\",\n            \"price\": \"210 Kč\"\n          }\n        ]\n      },\n      {\n        \"name\": \"Vegan\",\n        \"items\": [\n          {\n            \"name\": \"Mango and Avocado Roll\",\n            \"description\": \"(nori, rice, mango, avocado, unagi sauce)\",\n            \"price\": \"120 Kč\"\n          },\n          {\n            \"name\": \"Vegetable Roll\",\n            \"description\": \"(nori, rice, Japanese mayo, cucumber, bell pepper, avocado)\",\n            \"price\": \"150 Kč\"\n          }\n        ]\n      }\n    ]\n  }\n  "
                }
              ]
            },
            {
              "name": "md",
              "type": "directory",
              "children": [
                {
                  "name": "Grill.json",
                  "type": "file",
                  "size": 2309,
                  "hash_md5": "32750059d428157aa23fbb7442c494c1",
                  "hash_sha1": "b270983ce567070d12a2da3be79e968b28d09e1e",
                  "content": "{\n    \"menu_title\": \"Meniu Grill\",\n    \"description\": \"Încearcă carnea perfect gătită la grătar, plină de sucuri și savoare! Folosim doar ingrediente de calitate, condimente atent alese și doza potrivită de foc pentru a face fiecare mușcătură o experiență culinară de neuitat!\",\n    \"categories\": [\n      {\n        \"name\": \"Meniu Combo\",\n        \"items\": [\n          {\n            \"name\": \"Carne de porc la grătar cu legume și cartofi copți (650 g)\",\n            \"description\": \"(400 g carne, legume la grătar, cartofi copți cu unt)\",\n            \"price\": \"430 Kč\"\n          },\n          {\n            \"name\": \"Carne de pui la grătar cu legume și cartofi copți (600 g)\",\n            \"description\": \"(aripioare de pui, pulpe de pui, legume la grătar, cartofi copți)\",\n            \"price\": \"375 Kč\"\n          },\n          {\n            \"name\": \"Lulia Kebab la grătar cu legume și cartofi copți (600 g)\",\n            \"description\": \"(400 g Lulia kebab, legume la grătar, cartofi copți)\",\n            \"price\": \"385 Kč\"\n          },\n          {\n            \"name\": \"Brânză la grătar cu sos\",\n            \"description\": \"(brânză)\",\n            \"price\": \"165 Kč\"\n          },\n          {\n            \"name\": \"Porție Mare pentru un Grup Mare (4 kg)\",\n            \"description\": \"(1 kg carne de porc la grătar, 1 kg amestec de pui, 1 kg Lulia kebab, legume la grătar și cartofi copți)\",\n            \"price\": \"2 890 Kč\"\n          }\n        ]\n      },\n      {\n        \"name\": \"Clasice\",\n        \"items\": [\n          {\n            \"name\": \"Frigărui de porc la grătar (400 g)\",\n            \"price\": \"275 Kč\"\n          },\n          {\n            \"name\": \"Frigărui de pui la grătar (400 g)\",\n            \"price\": \"235 Kč\"\n          },\n          {\n            \"name\": \"Lulia Kebab la grătar (400 g)\",\n            \"price\": \"255 Kč\"\n          },\n          {\n            \"name\": \"Legume la grătar (300 g)\",\n            \"description\": \"(roșii, ardei gras, ciuperci, porumb)\",\n            \"price\": \"155 Kč\"\n          },\n          {\n            \"name\": \"Cartofi copți cu untură (300 g)\",\n            \"description\": \"(cartofi, untură)\",\n            \"price\": \"125 Kč\"\n          }\n        ]\n      }\n    ]\n  }\n  "
                },
                {
                  "name": "SETY.json",
                  "type": "file",
                  "size": 1439,
                  "hash_md5": "e7bcddcd1988687c7200cc5dc3b48939",
                  "hash_sha1": "30c5aca03062c8b6fe54ab7171c9d58e244a28d7",
                  "content": "{\n    \"menu_title\": \"Meniu Seturi\",\n    \"description\": \"Nu poți decide? Seturile noastre de sushi îți oferă ce e mai bun din bucătăria japoneză într-un singur pachet! O combinație de nigiri proaspete, maki, sashimi și alte delicii care vor încânta orice iubitor de sushi. Alege setul tău preferat și savurează armonia perfectă a gusturilor!\",\n    \"categories\": [\n      {\n        \"name\": \"Seturi\",\n        \"items\": [\n          {\n            \"name\": \"Big One (2 kg)\",\n            \"description\": \"• Avocado Maki\\n• Rulou copt cu pui\\n• Philadelphia XXL cu somon\\n• California cu creveți\\n• Rulou cu brânză\\n• Philadelphia De Luxe\\n• Tempura rulou cu anghilă\",\n            \"price\": \"1 390 Kč\"\n          }\n        ]\n      },\n      {\n        \"name\": \"Seturi cu Pește\",\n        \"items\": [\n          {\n            \"name\": \"Phila Set (1,250 kg)\",\n            \"description\": \"• Philadelphia cu somon\\n• Philadelphia cu ton\\n• Philadelphia XXL\\n• Philadelphia Mango\",\n            \"price\": \"950 Kč\"\n          }\n        ]\n      },\n      {\n        \"name\": \"Seturi Vegane\",\n        \"items\": [\n          {\n            \"name\": \"Set Vegan (800 g)\",\n            \"description\": \"• Rulou vegan cu mango și avocado\\n• Rulou vegan cu castravete și avocado\\n• Rulou cu brânză\\n• Rulou de legume\",\n            \"price\": \"450 Kč\"\n          }\n        ]\n      }\n    ]\n  }\n  "
                },
                {
                  "name": "Sushi.json",
                  "type": "file",
                  "size": 1789,
                  "hash_md5": "0ae04d2c5acab5703fb5e9cc74a13e41",
                  "hash_sha1": "04dc25e8951e19225ead684c9161d1881c98aea5",
                  "content": "{\n    \"menu_title\": \"Meniu Sushi\",\n    \"description\": \"Savurează sushi-ul pregătit cu grijă din cele mai proaspete ingrediente. Fiecare bucățică este o combinație perfectă de orez delicat, pește de calitate și arome echilibrate. Comandă la noi și bucură-te de o experiență autentică japoneză!\",\n    \"categories\": [\n      {\n        \"name\": \"Rulouri Autentice\",\n        \"items\": [\n          {\n            \"name\": \"Rulou cu brânză\",\n            \"description\": \"(nori, orez, brânză cremoasă, brânză cheddar)\",\n            \"price\": \"180 Kč\"\n          },\n          {\n            \"name\": \"Rulou cu somon prăjit și cheddar\",\n            \"description\": \"(nori, orez, avocado, brânză cremoasă, somon, cheddar, sos de nuci)\",\n            \"price\": \"240 Kč\"\n          }\n        ]\n      },\n      {\n        \"name\": \"Pește\",\n        \"items\": [\n          {\n            \"name\": \"Rulou cu castravete și avocado\",\n            \"description\": \"(nori, orez, castravete, avocado)\",\n            \"price\": \"120 Kč\"\n          },\n          {\n            \"name\": \"Tempura cu anghilă\",\n            \"description\": \"(nori, orez, anghilă, castravete, tempura, semințe de susan, brânză cremoasă, caviar masago)\",\n            \"price\": \"200 Kč\"\n          }\n        ]\n      },\n      {\n        \"name\": \"Rulouri Vegane\",\n        \"items\": [\n          {\n            \"name\": \"Rulou cu mango și avocado\",\n            \"description\": \"(nori, orez, mango, avocado, sos unagi)\",\n            \"price\": \"120 Kč\"\n          },\n          {\n            \"name\": \"Rulou de legume\",\n            \"description\": \"(nori, orez, maioneză japoneză, castravete, ardei gras, avocado)\",\n            \"price\": \"150 Kč\"\n          }\n        ]\n      }\n    ]\n  }\n  "
                }
              ]
            },
            {
              "name": "ro",
              "type": "directory",
              "children": [
                {
                  "name": "Grill.json",
                  "type": "file",
                  "size": 2309,
                  "hash_md5": "32750059d428157aa23fbb7442c494c1",
                  "hash_sha1": "b270983ce567070d12a2da3be79e968b28d09e1e",
                  "content": "{\n    \"menu_title\": \"Meniu Grill\",\n    \"description\": \"Încearcă carnea perfect gătită la grătar, plină de sucuri și savoare! Folosim doar ingrediente de calitate, condimente atent alese și doza potrivită de foc pentru a face fiecare mușcătură o experiență culinară de neuitat!\",\n    \"categories\": [\n      {\n        \"name\": \"Meniu Combo\",\n        \"items\": [\n          {\n            \"name\": \"Carne de porc la grătar cu legume și cartofi copți (650 g)\",\n            \"description\": \"(400 g carne, legume la grătar, cartofi copți cu unt)\",\n            \"price\": \"430 Kč\"\n          },\n          {\n            \"name\": \"Carne de pui la grătar cu legume și cartofi copți (600 g)\",\n            \"description\": \"(aripioare de pui, pulpe de pui, legume la grătar, cartofi copți)\",\n            \"price\": \"375 Kč\"\n          },\n          {\n            \"name\": \"Lulia Kebab la grătar cu legume și cartofi copți (600 g)\",\n            \"description\": \"(400 g Lulia kebab, legume la grătar, cartofi copți)\",\n            \"price\": \"385 Kč\"\n          },\n          {\n            \"name\": \"Brânză la grătar cu sos\",\n            \"description\": \"(brânză)\",\n            \"price\": \"165 Kč\"\n          },\n          {\n            \"name\": \"Porție Mare pentru un Grup Mare (4 kg)\",\n            \"description\": \"(1 kg carne de porc la grătar, 1 kg amestec de pui, 1 kg Lulia kebab, legume la grătar și cartofi copți)\",\n            \"price\": \"2 890 Kč\"\n          }\n        ]\n      },\n      {\n        \"name\": \"Clasice\",\n        \"items\": [\n          {\n            \"name\": \"Frigărui de porc la grătar (400 g)\",\n            \"price\": \"275 Kč\"\n          },\n          {\n            \"name\": \"Frigărui de pui la grătar (400 g)\",\n            \"price\": \"235 Kč\"\n          },\n          {\n            \"name\": \"Lulia Kebab la grătar (400 g)\",\n            \"price\": \"255 Kč\"\n          },\n          {\n            \"name\": \"Legume la grătar (300 g)\",\n            \"description\": \"(roșii, ardei gras, ciuperci, porumb)\",\n            \"price\": \"155 Kč\"\n          },\n          {\n            \"name\": \"Cartofi copți cu untură (300 g)\",\n            \"description\": \"(cartofi, untură)\",\n            \"price\": \"125 Kč\"\n          }\n        ]\n      }\n    ]\n  }\n  "
                },
                {
                  "name": "SETY.json",
                  "type": "file",
                  "size": 1439,
                  "hash_md5": "e7bcddcd1988687c7200cc5dc3b48939",
                  "hash_sha1": "30c5aca03062c8b6fe54ab7171c9d58e244a28d7",
                  "content": "{\n    \"menu_title\": \"Meniu Seturi\",\n    \"description\": \"Nu poți decide? Seturile noastre de sushi îți oferă ce e mai bun din bucătăria japoneză într-un singur pachet! O combinație de nigiri proaspete, maki, sashimi și alte delicii care vor încânta orice iubitor de sushi. Alege setul tău preferat și savurează armonia perfectă a gusturilor!\",\n    \"categories\": [\n      {\n        \"name\": \"Seturi\",\n        \"items\": [\n          {\n            \"name\": \"Big One (2 kg)\",\n            \"description\": \"• Avocado Maki\\n• Rulou copt cu pui\\n• Philadelphia XXL cu somon\\n• California cu creveți\\n• Rulou cu brânză\\n• Philadelphia De Luxe\\n• Tempura rulou cu anghilă\",\n            \"price\": \"1 390 Kč\"\n          }\n        ]\n      },\n      {\n        \"name\": \"Seturi cu Pește\",\n        \"items\": [\n          {\n            \"name\": \"Phila Set (1,250 kg)\",\n            \"description\": \"• Philadelphia cu somon\\n• Philadelphia cu ton\\n• Philadelphia XXL\\n• Philadelphia Mango\",\n            \"price\": \"950 Kč\"\n          }\n        ]\n      },\n      {\n        \"name\": \"Seturi Vegane\",\n        \"items\": [\n          {\n            \"name\": \"Set Vegan (800 g)\",\n            \"description\": \"• Rulou vegan cu mango și avocado\\n• Rulou vegan cu castravete și avocado\\n• Rulou cu brânză\\n• Rulou de legume\",\n            \"price\": \"450 Kč\"\n          }\n        ]\n      }\n    ]\n  }\n  "
                },
                {
                  "name": "Sushi.json",
                  "type": "file",
                  "size": 1789,
                  "hash_md5": "0ae04d2c5acab5703fb5e9cc74a13e41",
                  "hash_sha1": "04dc25e8951e19225ead684c9161d1881c98aea5",
                  "content": "{\n    \"menu_title\": \"Meniu Sushi\",\n    \"description\": \"Savurează sushi-ul pregătit cu grijă din cele mai proaspete ingrediente. Fiecare bucățică este o combinație perfectă de orez delicat, pește de calitate și arome echilibrate. Comandă la noi și bucură-te de o experiență autentică japoneză!\",\n    \"categories\": [\n      {\n        \"name\": \"Rulouri Autentice\",\n        \"items\": [\n          {\n            \"name\": \"Rulou cu brânză\",\n            \"description\": \"(nori, orez, brânză cremoasă, brânză cheddar)\",\n            \"price\": \"180 Kč\"\n          },\n          {\n            \"name\": \"Rulou cu somon prăjit și cheddar\",\n            \"description\": \"(nori, orez, avocado, brânză cremoasă, somon, cheddar, sos de nuci)\",\n            \"price\": \"240 Kč\"\n          }\n        ]\n      },\n      {\n        \"name\": \"Pește\",\n        \"items\": [\n          {\n            \"name\": \"Rulou cu castravete și avocado\",\n            \"description\": \"(nori, orez, castravete, avocado)\",\n            \"price\": \"120 Kč\"\n          },\n          {\n            \"name\": \"Tempura cu anghilă\",\n            \"description\": \"(nori, orez, anghilă, castravete, tempura, semințe de susan, brânză cremoasă, caviar masago)\",\n            \"price\": \"200 Kč\"\n          }\n        ]\n      },\n      {\n        \"name\": \"Rulouri Vegane\",\n        \"items\": [\n          {\n            \"name\": \"Rulou cu mango și avocado\",\n            \"description\": \"(nori, orez, mango, avocado, sos unagi)\",\n            \"price\": \"120 Kč\"\n          },\n          {\n            \"name\": \"Rulou de legume\",\n            \"description\": \"(nori, orez, maioneză japoneză, castravete, ardei gras, avocado)\",\n            \"price\": \"150 Kč\"\n          }\n        ]\n      }\n    ]\n  }\n  "
                }
              ]
            },
            {
              "name": "ru",
              "type": "directory",
              "children": [
                {
                  "name": "Grill.json",
                  "type": "file",
                  "size": 2853,
                  "hash_md5": "2d4ca3280991bb03bc70593ba0c5d660",
                  "hash_sha1": "517576fb81eb3b41b71e70fcf0a5cd05edcf65cb",
                  "content": "{\n  \"menu_title\": \"Гриль Меню\",\n  \"description\": \"Попробуйте идеально приготовленное на гриле мясо, насыщенное соками и вкусом! Мы используем только качественные ингредиенты, тщательно подобранные специи и правильный уровень жара, чтобы каждый кусочек был настоящим гастрономическим удовольствием!\",\n  \"categories\": [\n    {\n      \"name\": \"Комбо Меню\",\n      \"items\": [\n        {\n          \"name\": \"Гриль свинина с овощами и печёным картофелем (650 г)\",\n          \"description\": \"(400 г свинины, гриль овощи, картофель, масло)\",\n          \"price\": \"430 Kč\"\n        },\n        {\n          \"name\": \"Гриль курица с овощами и печёным картофелем (600 г)\",\n          \"description\": \"(куриные крылья, куриные голени, гриль овощи, запечённый картофель)\",\n          \"price\": \"375 Kč\"\n        },\n        {\n          \"name\": \"Гриль Люля-Кебаб с овощами и печёным картофелем (600 г)\",\n          \"description\": \"(400 г люля-кебаб, гриль овощи, запечённый картофель)\",\n          \"price\": \"385 Kč\"\n        },\n        {\n          \"name\": \"Гриль сыр с соусом\",\n          \"description\": \"(сыр)\",\n          \"price\": \"165 Kč\"\n        },\n        {\n          \"name\": \"Большая порция для большой компании (4 кг)\",\n          \"description\": \"(1 кг гриль свинины, 1 кг куриного ассорти, 1 кг люля-кебаба, гриль овощи, запечённый картофель)\",\n          \"price\": \"2 890 Kč\"\n        }\n      ]\n    },\n    {\n      \"name\": \"Классика\",\n      \"items\": [\n        {\n          \"name\": \"Шашлык из свинины (400 г)\",\n          \"price\": \"275 Kč\"\n        },\n        {\n          \"name\": \"Шашлык из курицы (400 г)\",\n          \"price\": \"235 Kč\"\n        },\n        {\n          \"name\": \"Гриль Люля-Кебаб (400 г)\",\n          \"price\": \"255 Kč\"\n        },\n        {\n          \"name\": \"Гриль овощи (300 г)\",\n          \"description\": \"(помидоры, болгарский перец, шампиньоны, кукуруза)\",\n          \"price\": \"155 Kč\"\n        },\n        {\n          \"name\": \"Гриль картофель с салом (300 г)\",\n          \"description\": \"(картофель, сало)\",\n          \"price\": \"125 Kč\"\n        }\n      ]\n    }\n  ]\n}\n"
                },
                {
                  "name": "SETY.json",
                  "type": "file",
                  "size": 1882,
                  "hash_md5": "ae69472609ee5a7e5cad2baf14f31890",
                  "hash_sha1": "a9f9b89fec9daf11e142edad885da8addcada0c2",
                  "content": "{\n    \"menu_title\": \"Сет Меню\",\n    \"description\": \"Не можете определиться? Наши суши сеты предлагают лучшее из японской кухни в одном наборе! Комбинация свежих нигири, маки, сашими и других деликатесов порадует каждого любителя суши. Выберите свой любимый сет и наслаждайтесь идеальным балансом вкусов!\",\n    \"categories\": [\n      {\n        \"name\": \"Сеты\",\n        \"items\": [\n          {\n            \"name\": \"Big One (2 кг)\",\n            \"description\": \"• Авокадо Маки\\n• Запечённый ролл с курицей\\n• Филадельфия с XXL лососем\\n• Калифорния с креветками\\n• Сырный ролл\\n• Филадельфия De Luxe\\n• Темпура ролл с угрём\",\n            \"price\": \"1 390 Kč\"\n          }\n        ]\n      },\n      {\n        \"name\": \"Рыбные Сеты\",\n        \"items\": [\n          {\n            \"name\": \"Phila Set (1,250 кг)\",\n            \"description\": \"• Филадельфия с лососем\\n• Филадельфия с тунцом\\n• Филадельфия XXL\\n• Филадельфия Манго\",\n            \"price\": \"950 Kč\"\n          }\n        ]\n      },\n      {\n        \"name\": \"Веганские Сеты\",\n        \"items\": [\n          {\n            \"name\": \"Веганский сет (800 г)\",\n            \"description\": \"• Веганский ролл с манго и авокадо\\n• Веганский ролл с огурцом и авокадо\\n• Сырный ролл\\n• Овощной ролл\",\n            \"price\": \"450 Kč\"\n          }\n        ]\n      }\n    ]\n  }\n  "
                },
                {
                  "name": "Sushi.json",
                  "type": "file",
                  "size": 2305,
                  "hash_md5": "2153ad0a3e8a6fa6ab285058ccbecde6",
                  "hash_sha1": "5cdeca9ecff9ea33e58d4cf696a67e3174495f27",
                  "content": "{\n    \"menu_title\": \"Меню Суши\",\n    \"description\": \"Насладитесь тщательно приготовленными суши из самых свежих ингредиентов. Каждый кусочек — это искусное сочетание нежного риса, качественной рыбы и идеально сбалансированных вкусов. Заказывайте у нас и наслаждайтесь настоящей японской кухней!\",\n    \"categories\": [\n      {\n        \"name\": \"Авторские Роллы\",\n        \"items\": [\n          {\n            \"name\": \"Сырный ролл\",\n            \"description\": \"(нори, рис, сливочный сыр, сыр чеддер)\",\n            \"price\": \"180 Kč\"\n          },\n          {\n            \"name\": \"Ролл с жареным лососем и чеддером\",\n            \"description\": \"(нори, рис, авокадо, сливочный сыр, лосось, чеддер, ореховый соус)\",\n            \"price\": \"240 Kč\"\n          }\n        ]\n      },\n      {\n        \"name\": \"Рыбные Роллы\",\n        \"items\": [\n          {\n            \"name\": \"Ролл с огурцом и авокадо\",\n            \"description\": \"(нори, рис, огурец, авокадо)\",\n            \"price\": \"120 Kč\"\n          },\n          {\n            \"name\": \"Темпура с угрем\",\n            \"description\": \"(нори, рис, угорь, огурец, темпурное тесто, кунжут, сливочный сыр, икра масаго)\",\n            \"price\": \"200 Kč\"\n          }\n        ]\n      },\n      {\n        \"name\": \"Веганские Роллы\",\n        \"items\": [\n          {\n            \"name\": \"Ролл с манго и авокадо\",\n            \"description\": \"(нори, рис, манго, авокадо, соус унаги)\",\n            \"price\": \"120 Kč\"\n          },\n          {\n            \"name\": \"Овощной ролл\",\n            \"description\": \"(нори, рис, японский майонез, огурец, болгарский перец, авокадо)\",\n            \"price\": \"150 Kč\"\n          }\n        ]\n      }\n    ]\n  }\n  "
                }
              ]
            },
            {
              "name": "uk",
              "type": "directory",
              "children": [
                {
                  "name": "Grill.json",
                  "type": "file",
                  "size": 2155,
                  "hash_md5": "5a9a550bcd6935338a10bf94a915d2c1",
                  "hash_sha1": "5df1780c90efeabdc71502b3174de528ca9c4ae8",
                  "content": "{\n    \"menu_title\": \"Гриль Меню\",\n    \"description\": \"Скуштуйте ідеально просмажене м’ясо, наповнене соками та смаком! Ми використовуємо лише якісні інгредієнти, ретельно підібрані спеції та правильну кількість вогню, щоб кожен шматочок був справжнім гастрономічним задоволенням!\",\n    \"categories\": [\n      {\n        \"name\": \"Комбо Меню\",\n        \"items\": [\n          {\n            \"name\": \"Грильоване свиняче м’ясо з овочами та запеченою картоплею (650 г)\",\n            \"description\": \"(400 г м’яса, грильовані овочі, картопля, масло)\",\n            \"price\": \"430 Kč\"\n          },\n          {\n            \"name\": \"Грильоване куряче м’ясо з овочами та картоплею (600 г)\",\n            \"description\": \"(курячі крильця, курячі стегенця, грильовані овочі, запечена картопля)\",\n            \"price\": \"375 Kč\"\n          }\n        ]\n      },\n      {\n        \"name\": \"Класика\",\n        \"items\": [\n          {\n            \"name\": \"Шашлик зі свинини (400 г)\",\n            \"price\": \"275 Kč\"\n          },\n          {\n            \"name\": \"Шашлик з курки (400 г)\",\n            \"price\": \"235 Kč\"\n          },\n          {\n            \"name\": \"Грильований Люля-кебаб (400 г)\",\n            \"price\": \"255 Kč\"\n          },\n          {\n            \"name\": \"Грильовані овочі (300 г)\",\n            \"description\": \"(помідори, перець, гриби, кукурудза)\",\n            \"price\": \"155 Kč\"\n          },\n          {\n            \"name\": \"Грильована картопля з салом (300 г)\",\n            \"description\": \"(картопля, сало)\",\n            \"price\": \"125 Kč\"\n          }\n        ]\n      }\n    ]\n  }\n  "
                },
                {
                  "name": "SETY.json",
                  "type": "file",
                  "size": 1874,
                  "hash_md5": "854f8d01155f0cef50cf2288d55247d4",
                  "hash_sha1": "bd61e93b1c501800ace81f6741d678ac612bcc1a",
                  "content": "{\n    \"menu_title\": \"Сет Меню\",\n    \"description\": \"Не можете обрати? Наші суші сети пропонують найкраще з японської кухні в одному наборі! Поєднання свіжих нігірі, макі, сашимі та інших делікатесів порадує кожного любителя суші. Виберіть свій улюблений сет та насолоджуйтесь ідеальним поєднанням смаків!\",\n    \"categories\": [\n      {\n        \"name\": \"Сети\",\n        \"items\": [\n          {\n            \"name\": \"Big One (2 кг)\",\n            \"description\": \"• Авокадо макі\\n• Печений рол з куркою\\n• Філадельфія з XXL лососем\\n• Каліфорнія з креветками\\n• Сирний рол\\n• Філадельфія De Luxe\\n• Темпура рол з вугром\",\n            \"price\": \"1 390 Kč\"\n          }\n        ]\n      },\n      {\n        \"name\": \"Рибні сети\",\n        \"items\": [\n          {\n            \"name\": \"Phila Set (1,250 кг)\",\n            \"description\": \"• Філадельфія з лососем\\n• Філадельфія з тунцем\\n• Філадельфія XXL\\n• Філадельфія Манго\",\n            \"price\": \"950 Kč\"\n          }\n        ]\n      },\n      {\n        \"name\": \"Веганські сети\",\n        \"items\": [\n          {\n            \"name\": \"Веганський сет (800 г)\",\n            \"description\": \"• Веганський рол з манго та авокадо\\n• Веганський рол з огірком та авокадо\\n• Сирний рол\\n• Овочевий рол\",\n            \"price\": \"450 Kč\"\n          }\n        ]\n      }\n    ]\n  }\n  "
                },
                {
                  "name": "Sushi.json",
                  "type": "file",
                  "size": 2257,
                  "hash_md5": "4bd1df37a1e19b417d3d30898d255a7e",
                  "hash_sha1": "0c12b5764efd3b5db0ae70b805af8359f3633553",
                  "content": "{\n    \"menu_title\": \"Суші Меню\",\n    \"description\": \"Скуштуйте ретельно приготовані суші з найсвіжіших інгредієнтів. Кожен шматочок – це мистецьке поєднання ніжного рису, якісної риби та ідеально збалансованих смаків. Замовляйте у нас та насолоджуйтеся справжньою японською кухнею!\",\n    \"categories\": [\n      {\n        \"name\": \"Авторські роли\",\n        \"items\": [\n          {\n            \"name\": \"Сирний рол\",\n            \"description\": \"(норі, рис, вершковий сир, сир чеддер)\",\n            \"price\": \"180 Kč\"\n          },\n          {\n            \"name\": \"Рол зі смаженим лососем і чеддером\",\n            \"description\": \"(норі, рис, авокадо, вершковий сир, лосось, чеддер, горіховий соус)\",\n            \"price\": \"240 Kč\"\n          }\n        ]\n      },\n      {\n        \"name\": \"Рибні роли\",\n        \"items\": [\n          {\n            \"name\": \"Рол з огірком та авокадо\",\n            \"description\": \"(норі, рис, огірок, авокадо)\",\n            \"price\": \"120 Kč\"\n          },\n          {\n            \"name\": \"Темпура з вугром\",\n            \"description\": \"(норі, рис, вугор, огірок, темпурний кляр, кунжут, вершковий сир, ікра масаго)\",\n            \"price\": \"200 Kč\"\n          }\n        ]\n      },\n      {\n        \"name\": \"Веганські роли\",\n        \"items\": [\n          {\n            \"name\": \"Рол з манго та авокадо\",\n            \"description\": \"(норі, рис, манго, авокадо, соус унагі)\",\n            \"price\": \"120 Kč\"\n          },\n          {\n            \"name\": \"Овочевий рол\",\n            \"description\": \"(норі, рис, японський майонез, огірок, перець, авокадо)\",\n            \"price\": \"150 Kč\"\n          }\n        ]\n      }\n    ]\n  }\n  "
                }
              ]
            },
            {
              "name": "Текстовый документ.txt",
              "type": "file",
              "size": 3895,
              "hash_md5": "d2c73f835b8fe7623f471264b7ceb610",
              "hash_sha1": "5c273537551988c405b2ca3d558f22a976e9a6e8",
              "content": "{\n    \"uk\": {\n      \"stop_words\": [\n        \"порадь\",\n        \"порекомендуй\",\n        \"запропонуй\",\n        \"suggest\",\n        \"recommend\",\n        \"що у вас є в меню\",\n        \"є в меню\",\n        \"поїсти\",\n        \"що можна поїсти\"\n      ],\n      \"synonyms\": {\n        \"sushi\": [\"суші\", \"рол\", \"ролли\", \"maki\", \"макі\"],\n        \"grill\": [\"гриль\", \"барбекю\", \"м'ясо\", \"шашлик\", \"стейк\"],\n        \"sety\": [\"сети\", \"набір\", \"комплект\", \"sety\", \"set\"]\n      },\n      \"extra_phrases\": [\n        \"на вечір\",\n        \"вечірнє меню\",\n        \"вечірні страви\",\n        \"рекомендуй на вечір\",\n        \"замов на вечір\"\n      ]\n    },\n    \"ru\": {\n      \"stop_words\": [\n        \"посоветуй\",\n        \"порекомендуй\",\n        \"предложи\",\n        \"suggest\",\n        \"recommend\",\n        \"что у вас есть в меню\",\n        \"есть в меню\",\n        \"покушать\",\n        \"поесть\",\n        \"есть что поесть\"\n      ],\n      \"synonyms\": {\n        \"sushi\": [\"суши\", \"роллы\", \"рол\", \"maki\", \"макі\"],\n        \"grill\": [\"гриль\", \"барбекю\", \"мясо\", \"шашлык\", \"стейк\"],\n        \"sety\": [\"сеты\", \"сет\", \"sety\", \"set\"]\n      },\n      \"extra_phrases\": [\n        \"на вечер\",\n        \"на ужин\",\n        \"вечернее меню\",\n        \"вечерние блюда\",\n        \"рекомендуй на вечер\",\n        \"заказ на вечер\"\n      ]\n    },\n    \"cs\": {\n      \"stop_words\": [\n        \"doporuč\",\n        \"navrhni\",\n        \"suggest\",\n        \"recommend\",\n        \"co máte v nabídce\",\n        \"máte v nabídce\",\n        \"sněst\",\n        \"najíst se\"\n      ],\n      \"synonyms\": {\n        \"sushi\": [\"sushi\", \"rolky\", \"maki\"],\n        \"grill\": [\"gril\", \"barbecue\", \"maso\", \"šašlik\", \"steak\"],\n        \"sety\": [\"sety\", \"sady\", \"set\"]\n      },\n      \"extra_phrases\": []\n    },\n    \"en\": {\n      \"stop_words\": [\n        \"recommend\",\n        \"suggest\",\n        \"propose\",\n        \"what do you have on your menu\",\n        \"menu\",\n        \"eat\",\n        \"dine\"\n      ],\n      \"synonyms\": {\n        \"sushi\": [\"sushi\", \"rolls\", \"maki\"],\n        \"grill\": [\"grill\", \"barbecue\", \"meat\", \"shashlik\", \"steak\"],\n        \"sety\": [\"sets\", \"set\", \"combo\", \"assortment\"]\n      },\n      \"extra_phrases\": [\n        \"evening\",\n        \"dinner\",\n        \"evening menu\",\n        \"suggest dinner\",\n        \"what to order for dinner\"\n      ]\n    },\n    \"md\": {\n      \"stop_words\": [\n        \"recomandă\",\n        \"sugerează\",\n        \"propune\",\n        \"ce aveți în meniu\",\n        \"există în meniu\",\n        \"mănâncă\",\n        \"mâncați\"\n      ],\n      \"synonyms\": {\n        \"sushi\": [\"sushi\", \"role\", \"maki\"],\n        \"grill\": [\"grill\", \"barbecue\", \"carne\", \"șașlic\", \"steak\"],\n        \"sety\": [\"seturi\", \"set\", \"combo\"]\n      },\n      \"extra_phrases\": [\n        \"pentru seară\",\n        \"cină\",\n        \"meniul de seară\",\n        \"sugerează cină\"\n      ]\n    },\n    \"ro\": {\n      \"stop_words\": [\n        \"recomandă\",\n        \"sugerează\",\n        \"propune\",\n        \"ce aveți în meniu\",\n        \"există în meniu\",\n        \"mănâncă\",\n        \"mâncați\"\n      ],\n      \"synonyms\": {\n        \"sushi\": [\"sushi\", \"role\", \"maki\"],\n        \"grill\": [\"grill\", \"barbecue\", \"carne\", \"șașlic\", \"steak\"],\n        \"sety\": [\"seturi\", \"set\", \"combo\"]\n      },\n      \"extra_phrases\": [\n        \"pentru seară\",\n        \"cină\",\n        \"meniul de seară\",\n        \"sugerează cină\",\n        \"ce să comanzi pentru seară\"\n      ]\n    }\n  }\n    "
            }
          ]
        },
        {
          "name": "requirements.txt",
          "type": "file",
          "size": 83,
          "hash_md5": "8a7917f3cb9caec2d00505ebfd61cb34",
          "hash_sha1": "56659a6233f6851873083dfa8289c9f095aaa4b6",
          "content": "aiogram==3.0.0b7\nopenai==0.27.0\npython-dotenv==0.20.0\nAPScheduler==3.9.1.post1\n"
        },
        {
          "name": "rgbar.py",
          "type": "file",
          "size": 19449,
          "hash_md5": "acd9a883085850a1a6d6984e81cdc5cd",
          "hash_sha1": "9332ded6caf6ebb1d7d4486c07eb306ab5dd9ad1",
          "content": "1\n\n\n\nimport os\nimport asyncio\nimport logging\nimport openai\nimport json\nimport random\nfrom aiogram import Bot, Dispatcher, types, F\nfrom aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton\nfrom aiogram.filters import Command\nfrom aiogram.dispatcher.middlewares.base import BaseMiddleware\nfrom dotenv import load_dotenv\nfrom apscheduler.schedulers.asyncio import AsyncIOScheduler\n\n# Настройка логирования: вывод в консоль (например, в PowerShell)\nlogging.basicConfig(level=logging.INFO, format=\"%(asctime)s - %(levelname)s - %(message)s\")\n\n# Загрузка переменных окружения\nload_dotenv()\nTOKEN = os.getenv(\"BOT_TOKEN\")\nOPENAI_API_KEY = os.getenv(\"OPENAI_API_KEY\")\n\n# Инициализация клиента OpenAI\nclient = openai.OpenAI(api_key=OPENAI_API_KEY)\n\nbot = Bot(token=TOKEN)\ndp = Dispatcher()\nscheduler = AsyncIOScheduler()\n\n# --- Middleware для логирования входящих сообщений ---\nclass LoggingMiddleware(BaseMiddleware):\n    async def __call__(self, handler, event: Message, data: dict):\n        logging.info(f\"User {event.from_user.id} ({event.from_user.full_name}) sent: {event.text}\")\n        return await handler(event, data)\n\n# Регистрируем middleware\ndp.message.middleware(LoggingMiddleware())\n\n# Папка с меню и язык по умолчанию\nMENU_DIR = \"menusc\"\nDEFAULT_LANGUAGE = \"uk\"\n\nLANGUAGE_CODES = {\n    \"Українська 🇺🇦 (Українська)\": \"uk\",\n    \"Русский 🇷🇺 (Русский)\": \"ru\",\n    \"Čeština 🇨🇿 (Čeština)\": \"cs\",\n    \"English 🇬🇧 (English)\": \"en\",\n    \"Moldovenească 🇲🇩 (Moldovenească)\": \"md\",\n    \"Română 🇷🇴 (Română)\": \"ro\"\n}\n\n# Загрузка стоп-слов и синонимов из файла stopwords.json\ndef load_stopwords():\n    path = os.path.join(MENU_DIR, \"stopwords.json\")\n    if os.path.exists(path):\n        try:\n            with open(path, \"r\", encoding=\"utf-8\") as f:\n                return json.load(f)\n        except Exception as e:\n            logging.error(f\"Ошибка загрузки стоп-слов из {path}: {e}\")\n    return {}\n\nSTOPWORDS_DATA = load_stopwords()\n\ndef get_stop_words(language):\n    return STOPWORDS_DATA.get(language, {}).get(\"stop_words\", [])\n\ndef get_synonyms(language):\n    default_category_keywords = {\n        \"sushi\": [\"суши\", \"рол\", \"maki\", \"макі\"],\n        \"grill\": [\"гриль\", \"барбекю\", \"мясо\", \"шашлык\", \"стейк\"],\n        \"sety\": [\"сеты\", \"сет\", \"sety\", \"set\"]\n    }\n    synonyms = STOPWORDS_DATA.get(language, {}).get(\"synonyms\", {})\n    return synonyms if synonyms else default_category_keywords\n\n# Дополнительные ключевые фразы для запросов, связанных с меню (заказ на вечер и т.д.)\nEXTRA_MENU_PHRASES = {\n    \"ru\": [\"на вечер\", \"на ужин\", \"вечернее меню\", \"вечерние блюда\", \"рекомендуй на вечер\", \"заказ на вечер\"],\n    \"uk\": [\"на вечір\", \"вечірнє меню\", \"вечірні страви\", \"рекомендуй на вечір\", \"замов на вечір\"],\n    \"en\": [\"evening\", \"dinner\", \"evening menu\", \"suggest dinner\", \"what to order for dinner\"]\n}\n\ndef get_combined_menu_keywords():\n    combined = []\n    for d in STOPWORDS_DATA.values():\n        combined.extend(d.get(\"stop_words\", []))\n    for phrases in EXTRA_MENU_PHRASES.values():\n        combined.extend(phrases)\n    return combined\n\n# Детекция языка запроса по стоп-словам (из стандартного списка и дополнительных фраз)\ndef detect_query_language(query: str) -> str:\n    query_lower = query.lower()\n    for lang, phrases in EXTRA_MENU_PHRASES.items():\n        if any(phrase in query_lower for phrase in phrases):\n            return lang\n    for lang, data in STOPWORDS_DATA.items():\n        stop_words = data.get(\"stop_words\", [])\n        if any(sw in query_lower for sw in stop_words):\n            return lang\n    return None\n\n# Словари для хранения данных пользователей и выбранных языков\nuser_data = {}\nuser_languages = {}\n\ndef get_user_info(user_id, first_name, gender):\n    if user_id not in user_data:\n        polite_form = \"дорогой\" if gender == \"male\" else \"дорогая\"\n        user_data[user_id] = {\n            \"name\": first_name,\n            \"gender\": polite_form,\n            \"language\": DEFAULT_LANGUAGE\n        }\n    return user_data[user_id]\n\n# Функция загрузки конфигурации для выбранного языка\ndef load_config(language=DEFAULT_LANGUAGE):\n    config_file = os.path.join(\"configs\", f\"config_{language}.json\")\n    if not os.path.exists(config_file):\n        logging.error(f\"Файл {config_file} не найден. Загружается конфигурация по умолчанию.\")\n        language = DEFAULT_LANGUAGE\n        config_file = os.path.join(\"configs\", f\"config_{language}.json\")\n    try:\n        with open(config_file, \"r\", encoding=\"utf-8\") as file:\n            return json.load(file)\n    except (FileNotFoundError, json.JSONDecodeError):\n        logging.error(f\"Ошибка загрузки конфигурации из {config_file}.\")\n        return {}\n\n# Функция для загрузки блюд из локальных JSON-файлов меню по выбранному языку и (опционально) категории\ndef load_dishes(language, specific_category=None):\n    dishes = []\n    menu_path = os.path.join(MENU_DIR, language)\n    file_mapping = {\n        \"sushi\": \"Sushi.json\",\n        \"grill\": \"Grill.json\",\n        \"sety\": \"SETY.json\"\n    }\n    if specific_category and specific_category.lower() in file_mapping:\n        file_path = os.path.join(menu_path, file_mapping[specific_category.lower()])\n        if os.path.exists(file_path):\n            try:\n                with open(file_path, \"r\", encoding=\"utf-8\") as f:\n                    data = json.load(f)\n                    for category in data.get(\"categories\", []):\n                        dishes.extend(category.get(\"items\", []))\n            except Exception as e:\n                logging.error(f\"Ошибка загрузки блюд из {file_path}: {e}\")\n    else:\n        if os.path.exists(menu_path):\n            for filename in os.listdir(menu_path):\n                if filename.endswith(\".json\") and filename.lower() != \"stopwords.json\":\n                    file_path = os.path.join(menu_path, filename)\n                    try:\n                        with open(file_path, \"r\", encoding=\"utf-8\") as f:\n                            data = json.load(f)\n                            for category in data.get(\"categories\", []):\n                                dishes.extend(category.get(\"items\", []))\n                    except Exception as e:\n                        logging.error(f\"Ошибка загрузки блюд из {file_path}: {e}\")\n    return dishes\n\n# Словарь с персональными комментариями для рекомендаций\npersonal_comments = {\n    \"sushi\": [\"Отличный выбор для любителей свежести!\", \"Эти суши вас не разочаруют!\"],\n    \"grill\": [\"Для настоящих гурманов!\", \"Отлично подходит для вечеринки!\"],\n    \"sety\": [\"Идеальное сочетание вкусов!\", \"Попробуйте, это хит нашего меню!\"],\n    \"general\": [\"Приятного аппетита!\", \"Наслаждайтесь вашим заказом!\"]\n}\n\n# Функция для обработки запросов к OpenAI (для вопросов, не связанных с меню)\nasync def ask_openai(prompt, user_id, user_level=\"A1\"):\n    try:\n        lower_prompt = prompt.lower()\n        language = get_language(user_id)\n        all_menu_keywords = get_combined_menu_keywords()\n        if any(kw in lower_prompt for kw in all_menu_keywords):\n            return \"Пожалуйста, воспользуйтесь командой /menu для получения рекомендаций из нашего меню.\"\n        \n        config = load_config(language)\n        system_prompt = config.get(\"description\", \"Ты – Ника, администраторка кафе 'rg-bar'. Отвечай на вопросы клиентов.\")\n        response_style = config.get(\"response_style\", {})\n        tone = response_style.get(\"tone\", \"Дружелюбный, но профессиональный\")\n        approach = response_style.get(\"approach\", \"Используй понятный язык и вежливость\")\n        \n        user_message = (\n            f\"Я посетитель кафе 'rg-bar'. \"\n            f\"Пожалуйста, отвечай на {language} языке. \"\n            f\"Стиль: {tone}. Подход: {approach}. \"\n            f\"Мой запрос: {prompt}\"\n        )\n        \n        response = client.chat.completions.create(\n            model=\"gpt-4o\",\n            messages=[\n                {\"role\": \"system\", \"content\": system_prompt},\n                {\"role\": \"user\", \"content\": user_message}\n            ]\n        )\n        return response.choices[0].message.content\n    except Exception as e:\n        logging.error(f\"OpenAI error: {e}\")\n        return \"Произошла ошибка при обработке запроса AI.\"\n\n# Словарь для хранения рекомендаций, чтобы не повторять одни и те же блюда\nuser_recommendations = {}\n\n# Функция рекомендации блюда из локальных файлов меню с использованием заданного языка\nasync def recommend_dish(query: str, user_id: int, language: str) -> str:\n    query_lower = query.lower()\n    synonyms = get_synonyms(language)\n    \n    target_category = None\n    for cat, syn_list in synonyms.items():\n        if any(kw in query_lower for kw in syn_list):\n            target_category = cat\n            break\n\n    rec_category = target_category if target_category else \"general\"\n\n    if user_id not in user_recommendations:\n        user_recommendations[user_id] = {\"sushi\": set(), \"grill\": set(), \"sety\": set(), \"general\": set()}\n\n    dishes = load_dishes(language, specific_category=target_category) if target_category else load_dishes(language)\n    available = [d for d in dishes if d.get(\"name\") not in user_recommendations[user_id][rec_category]]\n    if not available:\n        user_recommendations[user_id][rec_category] = set()\n        available = dishes\n\n    if not available:\n        return f\"❌ К сожалению, в данный момент нет рекомендаций по {target_category}.\"\n\n    dish = random.choice(available)\n    user_recommendations[user_id][rec_category].add(dish.get(\"name\"))\n    comment_list = personal_comments.get(target_category, personal_comments[\"general\"])\n    comment = random.choice(comment_list)\n    user_info = user_data.get(user_id, {})\n    name = user_info.get(\"name\", \"друг\")\n    polite_form = user_info.get(\"gender\", \"\")\n    return (f\"{polite_form.capitalize()} {name}, вот моя рекомендация:\\n\"\n            f\"<b>{dish.get('name', 'Без названия')}</b> ({dish.get('category', '').capitalize()}) - {dish.get('price', '')}\\n\"\n            f\"{dish.get('description', '')}\\n\\n\"\n            f\"{comment}\")\n\ndef get_language(user_id):\n    return user_data.get(user_id, {}).get(\"language\", DEFAULT_LANGUAGE)\n\n# Обработчик команды /start\n@dp.message(Command(\"start\"))\nasync def send_welcome(message: Message):\n    user_id = message.from_user.id\n    first_name = message.from_user.first_name\n    gender = \"male\" if message.from_user.username else \"female\"\n    user_info = get_user_info(user_id, first_name, gender)\n    name = user_info[\"name\"]\n    polite_form = user_info[\"gender\"]\n\n    config = load_config(user_info[\"language\"])\n    goal = config.get(\"goal\", \"Добро пожаловать в кафе 'rg-bar'. Я Ника, ваша администраторка. Больше информации: https://www.rg-barliberec.com/\")\n    await message.answer(f\"Привет, {polite_form} {name}! 🎓 {goal}\\n\\n\")\n\n# Обработчик запросов, связанных с меню, на основе комбинированного списка ключевых фраз\n@dp.message(lambda message: any(kw in message.text.lower() for kw in get_combined_menu_keywords()))\nasync def recommendation_handler(message: Message):\n    user_id = message.from_user.id\n    detected_lang = detect_query_language(message.text)\n    if detected_lang is None:\n        detected_lang = get_language(user_id)\n    user_info = user_data.get(user_id, {})\n    name = user_info.get(\"name\", \"друг\")\n    await message.answer(f\"Сейчас посмотрю, {name}...\", parse_mode=\"HTML\")\n    await asyncio.sleep(random.randint(2, 5))\n    recommendation = await recommend_dish(message.text, user_id, detected_lang)\n    await message.answer(recommendation, parse_mode=\"HTML\")\n\n# Обработчик смены языка\n@dp.message(Command(\"language\"))\nasync def change_language(message: Message):\n    keyboard = ReplyKeyboardMarkup(\n        keyboard=[[KeyboardButton(text=lang)] for lang in LANGUAGE_CODES.keys()],\n        resize_keyboard=True,\n        one_time_keyboard=True\n    )\n    await message.answer(\"🌍 Выберите язык общения:\", reply_markup=keyboard)\n\n@dp.message(F.text.in_(LANGUAGE_CODES.keys()))\nasync def set_language(message: Message):\n    user_languages[message.from_user.id] = LANGUAGE_CODES[message.text]\n    if message.from_user.id in user_data:\n        user_data[message.from_user.id][\"language\"] = LANGUAGE_CODES[message.text]\n    await message.answer(f\"✅ Язык изменен на {message.text}\", reply_markup=types.ReplyKeyboardRemove())\n\n# Команда для показа меню\n@dp.message(Command(\"menu\"))\nasync def menu_command(message: Message):\n    language = get_language(message.from_user.id)\n    keyboard = InlineKeyboardMarkup(inline_keyboard=[\n        [InlineKeyboardButton(text=\"🍣 Sushi\", callback_data=f\"menu_Sushi_{language}\")],\n        [InlineKeyboardButton(text=\"🥢 SETY\", callback_data=f\"menu_SETY_{language}\")],\n        [InlineKeyboardButton(text=\"🔥 Grill\", callback_data=f\"menu_Grill_{language}\")]\n    ])\n    await message.answer(\"🔹 Выберите тип меню:\", reply_markup=keyboard)\n\n@dp.callback_query(lambda c: c.data and c.data.startswith(\"menu_\"))\nasync def menu_callback(callback: types.CallbackQuery):\n    try:\n        _, menu_type, language = callback.data.split(\"_\")\n        menu_path = os.path.join(MENU_DIR, language, f\"{menu_type}.json\")\n        if not os.path.exists(menu_path):\n            await callback.message.edit_text(f\"❌ Меню \\\"{menu_type}\\\" недоступно для выбранного языка.\")\n            return\n        with open(menu_path, \"r\", encoding=\"utf-8\") as f:\n            data = json.load(f)\n        title = data.get(\"menu_title\", menu_type)\n        description = data.get(\"description\", \"\")\n        menu_text = f\"<b>{title}</b>\\n{description}\\n\\n\"\n        for category in data.get(\"categories\", []):\n            cat_name = category.get(\"name\", \"\")\n            menu_text += f\"<u>{cat_name}</u>\\n\"\n            for item in category.get(\"items\", []):\n                name = item.get(\"name\", \"\")\n                price = item.get(\"price\", \"\")\n                item_desc = item.get(\"description\", \"\")\n                menu_text += f\"🔹 <b>{name}</b> - {price}\\n\"\n                if item_desc:\n                    menu_text += f\"  {item_desc}\\n\"\n            menu_text += \"\\n\"\n        await callback.message.edit_text(menu_text, parse_mode=\"HTML\")\n    except Exception as e:\n        logging.error(f\"Ошибка обработки callback: {e}\")\n        await callback.message.answer(\"❌ Ошибка загрузки меню.\")\n    await callback.answer()\n\n# Общий обработчик сообщений для диалога (если сообщение не содержит ключевых фраз для меню)\n@dp.message(lambda message: not message.text.startswith(\"/\") and not any(kw in message.text.lower() for kw in get_combined_menu_keywords()))\nasync def ai_response(message: Message):\n    language = get_language(message.from_user.id)\n    response = await ask_openai(message.text, message.from_user.id)\n    await message.answer(response)\n\n@dp.message(Command(\"support\"))\nasync def support_handler(message: Message):\n    support_text = \"Техническая поддержка: [Mykolacherstvyi](https://t.me/Mykolacherstvyi)\"\n    await message.answer(support_text, parse_mode=\"Markdown\")\n\n@dp.message(Command(\"bots\"))\nasync def bots_handler(message: Message):\n    bots_text = (\n        \"Полезные боты:\\n\"\n        \"• [@MigrantHelperCZ_bot - юрист](https://t.me/MigrantHelperCZ_bot)\\n\"\n        \"• [@Holidayscz_bot - гид по Чехии](https://t.me/Holidayscz_bot)\\n\"\n        \"• [@ExamCZBot - учим чешский](https://t.me/ExamCZBot)\"\n    )\n    await message.answer(bots_text, parse_mode=\"Markdown\")\n\n# Новые команды для контактов и официального сайта\n@dp.message(Command(\"contacts\"))\nasync def contacts_handler(message: Message):\n    contacts_text = \"RG BAR - Tanvaldská 299/299, 463 11 Liberec 30-Vratislavice nad Nisou\\n+420 739 462 002\"\n    await message.answer(contacts_text)\n\n@dp.message(Command(\"website\"))\nasync def website_handler(message: Message):\n    website_text = \"https://www.rg-barliberec.com\"\n    await message.answer(website_text)\n\n# Новая версия функции установки нативных команд\nasync def set_bot_commands(bot: Bot):\n    commands = [\n        types.BotCommand(command=\"start\", description=\"Запустить бота\"),\n        types.BotCommand(command=\"language\", description=\"Выбрать язык\"),\n        types.BotCommand(command=\"menu\", description=\"ассортимент кафе\"),\n        types.BotCommand(command=\"contacts\", description=\"RG BAR - Tanvaldská 299/299, 463 11 Liberec 30-Vratislavice nad Nisou +420 739 462 002\"),\n        types.BotCommand(command=\"website\", description=\"https://www.rg-barliberec.com\"),\n        types.BotCommand(command=\"bots\", description=\"Полезные боты\"),\n        types.BotCommand(command=\"support\", description=\"Тех. поддержка\")\n    ]\n    await bot.set_my_commands(commands)\n\nasync def main():\n    await bot.delete_webhook(drop_pending_updates=True)\n    await set_bot_commands(bot)\n    scheduler.start()\n    await dp.start_polling(bot)\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n"
        },
        {
          "name": "routers",
          "type": "directory",
          "children": [
            {
              "name": "smart_router.py",
              "type": "file",
              "size": 2178,
              "hash_md5": "7bc559295dd8e4bf0fd0b8a3cd7dde62",
              "hash_sha1": "4c386f6af6bb6f1f566b9d4718e5167074411492",
              "content": "from aiogram import types\nfrom rgbar import get_language, recommend_dish, menu_command\nimport asyncio\n\n# 🔍 Ключевые слова\nORDER_WORDS = [\n    \"заказать\", \"сделать заказ\", \"оформить\", \"добавь в корзину\",\n    \"оплата\", \"хочу заказать\"\n]\n\nMENU_WORDS = [\n    \"меню\", \"что есть\", \"ассортимент\", \"выбор\", \"блюда\",\n    \"что можно заказать\", \"покажи\", \"голоден\", \"ужин\", \"завтрак\", \"обед\"\n]\n\nRECOMMEND_WORDS = [\n    \"посоветуй\", \"рекомендуешь\", \"что вкусное\", \"предложи\", \"удиви\", \"что бы ты выбрала\"\n]\n\nCATEGORY_WORDS = {\n    \"sushi\": [\"суши\", \"роллы\", \"маки\"],\n    \"grill\": [\"гриль\", \"мясо\", \"барбекю\", \"шашлык\", \"стейк\"],\n    \"sety\": [\"сеты\", \"сет\", \"комбо\", \"на двоих\", \"на компанию\"]\n}\n\n# 🧠 Интеллектуальный роутер\nasync def smart_router(message: types.Message):\n    text = message.text.lower()\n    user_id = message.from_user.id\n    language = get_language(user_id)\n\n    if any(word in text for word in ORDER_WORDS):\n        await message.answer(\"Чтобы оформить заказ, открой меню через /menu и выбери блюдо. Я помогу с оформлением!\")\n        return\n\n    if any(word in text for word in MENU_WORDS):\n        await menu_command(message)\n        return\n\n    for category, words in CATEGORY_WORDS.items():\n        if any(word in text for word in words):\n            recommendation = await recommend_dish(text, user_id, language)\n            await message.answer(recommendation, parse_mode=\"HTML\")\n            return\n\n    if any(word in text for word in RECOMMEND_WORDS):\n        await message.answer(\"Секундочку, подберу для тебя что-то вкусненькое... 🍣\")\n        await asyncio.sleep(2)\n        recommendation = await recommend_dish(text, user_id, language)\n        await message.answer(recommendation, parse_mode=\"HTML\")\n"
            }
          ]
        },
        {
          "name": "services",
          "type": "directory",
          "children": [
            {
              "name": "config_service.py",
              "type": "file",
              "size": 2396,
              "hash_md5": "4576c84e5fff5ffa4f6c1f3ad34b834a",
              "hash_sha1": "5bf4c9758286970041d94a7e052f2e3fbd3f39f8",
              "content": "# services/config_service.py\n\nimport os\nimport json\nimport logging\n\nfrom aiogram import Bot, types\n\nDEFAULT_LANGUAGE = \"uk\"\n\nLANGUAGE_CODES = {\n    \"Українська 🇺🇦 (Українська)\": \"uk\",\n    \"Русский 🇷🇺 (Русский)\": \"ru\",\n    \"Čeština 🇨🇿 (Čeština)\": \"cs\",\n    \"English 🇬🇧 (English)\": \"en\",\n    \"Moldovenească 🇲🇩 (Moldovenească)\": \"md\",\n    \"Română 🇷🇴 (Română)\": \"ro\"\n}\n\nuser_data = {}\nuser_languages = {}\n\ndef get_user_info(user_id, first_name, gender):\n    if user_id not in user_data:\n        polite_form = \"дорогой\" if gender == \"male\" else \"дорогая\"\n        user_data[user_id] = {\n            \"name\": first_name,\n            \"gender\": gender,\n            \"polite\": polite_form,\n            \"language\": DEFAULT_LANGUAGE\n        }\n    return user_data[user_id]\n\ndef get_language(user_id):\n    return user_data.get(user_id, {}).get(\"language\", DEFAULT_LANGUAGE)\n\ndef load_config(language=DEFAULT_LANGUAGE):\n    config_file = os.path.join(\"configs\", f\"config_{language}.json\")\n    if not os.path.exists(config_file):\n        logging.error(f\"Файл {config_file} не найден. Загружается конфигурация по умолчанию.\")\n        language = DEFAULT_LANGUAGE\n        config_file = os.path.join(\"configs\", f\"config_{language}.json\")\n    try:\n        with open(config_file, \"r\", encoding=\"utf-8\") as file:\n            return json.load(file)\n    except (FileNotFoundError, json.JSONDecodeError):\n        logging.error(f\"Ошибка загрузки конфигурации из {config_file}.\")\n        return {}\n\nasync def set_bot_commands(bot: Bot):\n    commands = [\n        types.BotCommand(command=\"start\", description=\"Запустить бота\"),\n        types.BotCommand(command=\"language\", description=\"Выбрать язык\"),\n        types.BotCommand(command=\"menu\", description=\"Ассортимент кафе\"),\n        types.BotCommand(command=\"contacts\", description=\"Адрес и телефон\"),\n        types.BotCommand(command=\"website\", description=\"Сайт кафе\"),\n        types.BotCommand(command=\"bots\", description=\"Полезные боты\"),\n        types.BotCommand(command=\"support\", description=\"Тех. поддержка\")\n    ]\n    await bot.set_my_commands(commands)\n"
            },
            {
              "name": "openai_service.py",
              "type": "file",
              "size": 3402,
              "hash_md5": "c35231830dc4e00b5240a253927cbc2c",
              "hash_sha1": "3cd6df2167672a9dd3575dca4962307f68a438ef",
              "content": "import os\nimport logging\nimport json\nimport openai\nimport asyncio\n\nfrom services.config_service import user_data\n\n# Устанавливаем API-ключ (load_dotenv() должен быть вызван в main.py)\nopenai.api_key = os.getenv(\"OPENAI_API_KEY\")\n\ndef get_companion_system_prompt(user_id):\n    user = user_data.get(user_id, {})\n    # Если пользователь мужчина – используем профиль для виртуального парня, иначе – для виртуальной девушки.\n    filename = \"bot_men.json\" if user.get(\"gender\") == \"male\" else \"bot_woomen.json\"\n    path = os.path.join(\"gender_bot\", filename)\n    logging.info(f\"Попытка открыть файл: {path}\")\n    if not os.path.exists(path):\n        logging.error(f\"Файл не найден: {path}\")\n        return \"Ты – помощник.\"  # fallback\n    with open(path, \"r\", encoding=\"utf-8\") as f:\n        try:\n            companion_data = json.load(f)\n            logging.info(f\"Содержимое файла {filename}: {companion_data}\")\n        except Exception as ex:\n            logging.error(f\"Ошибка при загрузке JSON из {filename}: {ex}\")\n            return \"Ты – помощник.\"\n    role = companion_data.get(\"bot_profile\", {}).get(\"role\", \"помощник\")\n    description = companion_data.get(\"bot_profile\", {}).get(\"description\", \"\")\n    prompt = f\"Ты – {role}. {description}\"\n    logging.info(f\"Сформированный системный промпт: {prompt}\")\n    return prompt\n\nasync def ask_openai_companion(prompt, user_id):\n    try:\n        system_prompt = get_companion_system_prompt(user_id)\n        user_message = f\"Пользователь спрашивает: {prompt}\"\n        logging.info(f\"User message: {user_message}\")\n        \n        # Используем модель \"gpt-3.5-turbo-0125\"\n        model_name = \"gpt-3.5-turbo-0125\"\n        \n        def sync_call():\n            return openai.ChatCompletion.create(\n                model=model_name,\n                messages=[\n                    {\"role\": \"system\", \"content\": system_prompt},\n                    {\"role\": \"user\", \"content\": user_message}\n                ],\n                request_timeout=30,\n            )\n        response = await asyncio.to_thread(sync_call)\n        logging.info(f\"OpenAI raw response: {response}\")\n        \n        if not response or not hasattr(response, \"choices\") or len(response.choices) == 0:\n            logging.error(\"OpenAI вернул пустой ответ\")\n            return \"Произошла ошибка при обработке запроса AI.\"\n        \n        content = response.choices[0].message.content.strip()\n        logging.info(f\"OpenAI ответ: {content}\")\n        if not content:\n            logging.error(\"Пустой ответ от OpenAI\")\n            return \"Извините, я не смогла получить ответ от сервера.\"\n        \n        return content\n    except Exception as e:\n        if hasattr(e, 'response') and e.response is not None:\n            logging.error(f\"Response text: {e.response.text}\")\n        logging.error(f\"OpenAI error (companion): {e}\")\n        return \"Произошла ошибка при обработке запроса AI.\"\n"
            },
            {
              "name": "recommendation_service.py",
              "type": "file",
              "size": 7355,
              "hash_md5": "41fa9e32123978453cbeae6ca625e1c3",
              "hash_sha1": "beaa7fd6072bfd62c954e1e951b15ff23f6c3090",
              "content": "# services/recommendation_service.py\n\nimport os\nimport json\nimport logging\nimport random\n\nMENU_DIR = \"menusc\"\n\n# Загружаем stopwords\nSTOPWORDS_DATA = {}\ntry:\n    path = os.path.join(MENU_DIR, \"stopwords.json\")\n    if os.path.exists(path):\n        with open(path, \"r\", encoding=\"utf-8\") as f:\n            STOPWORDS_DATA = json.load(f)\nexcept Exception as e:\n    logging.error(f\"Ошибка загрузки стоп-слов: {e}\")\n\ndef get_stop_words(language):\n    return STOPWORDS_DATA.get(language, {}).get(\"stop_words\", [])\n\ndef get_synonyms(language):\n    default_category_keywords = {\n        \"sushi\": [\"суши\", \"рол\", \"maki\", \"макі\"],\n        \"grill\": [\"гриль\", \"барбекю\", \"мясо\", \"шашлык\", \"стейк\"],\n        \"sety\": [\"сеты\", \"сет\", \"sety\", \"set\"]\n    }\n    synonyms = STOPWORDS_DATA.get(language, {}).get(\"synonyms\", {})\n    return synonyms if synonyms else default_category_keywords\n\nEXTRA_MENU_PHRASES = {\n    \"ru\": [\"на вечер\", \"на ужин\", \"вечернее меню\", \"вечерние блюда\", \"рекомендуй на вечер\", \"заказ на вечер\"],\n    \"uk\": [\"на вечір\", \"вечірнє меню\", \"вечірні страви\", \"рекомендуй на вечір\", \"замов на вечір\"],\n    \"en\": [\"evening\", \"dinner\", \"evening menu\", \"suggest dinner\", \"what to order for dinner\"]\n}\n\ndef get_combined_menu_keywords():\n    combined = []\n    for d in STOPWORDS_DATA.values():\n        combined.extend(d.get(\"stop_words\", []))\n    for phrases in EXTRA_MENU_PHRASES.values():\n        combined.extend(phrases)\n    return combined\n\ndef detect_query_language(query: str) -> str:\n    query_lower = query.lower()\n    for lang, phrases in EXTRA_MENU_PHRASES.items():\n        if any(phrase in query_lower for phrase in phrases):\n            return lang\n    for lang, data in STOPWORDS_DATA.items():\n        stop_words = data.get(\"stop_words\", [])\n        if any(sw in query_lower for sw in stop_words):\n            return lang\n    return None\n\ndef load_dishes(language, specific_category=None):\n    dishes = []\n    menu_path = os.path.join(MENU_DIR, language)\n    file_mapping = {\n        \"sushi\": \"Sushi.json\",\n        \"grill\": \"Grill.json\",\n        \"sety\": \"SETY.json\"\n    }\n    if specific_category and specific_category.lower() in file_mapping:\n        file_path = os.path.join(menu_path, file_mapping[specific_category.lower()])\n        if os.path.exists(file_path):\n            try:\n                with open(file_path, \"r\", encoding=\"utf-8\") as f:\n                    data = json.load(f)\n                    for category in data.get(\"categories\", []):\n                        dishes.extend(category.get(\"items\", []))\n            except Exception as e:\n                logging.error(f\"Ошибка загрузки блюд из {file_path}: {e}\")\n    else:\n        if os.path.exists(menu_path):\n            for filename in os.listdir(menu_path):\n                if filename.endswith(\".json\") and filename.lower() != \"stopwords.json\":\n                    file_path = os.path.join(menu_path, filename)\n                    try:\n                        with open(file_path, \"r\", encoding=\"utf-8\") as f:\n                            data = json.load(f)\n                            for category in data.get(\"categories\", []):\n                                dishes.extend(category.get(\"items\", []))\n                    except Exception as e:\n                        logging.error(f\"Ошибка загрузки блюд из {file_path}: {e}\")\n    return dishes\n\npersonal_comments = {\n    \"sushi\": [\"Отличный выбор для любителей свежести!\", \"Эти суши вас не разочаруют!\"],\n    \"grill\": [\"Для настоящих гурманов!\", \"Отлично подходит для вечеринки!\"],\n    \"sety\": [\"Идеальное сочетание вкусов!\", \"Попробуйте, это хит нашего меню!\"],\n    \"general\": [\"Приятного аппетита!\", \"Наслаждайтесь вашим заказом!\"]\n}\n\n# Храним рекомендации, чтобы не повторять\nuser_recommendations = {}\n\nasync def recommend_dish(query: str, user_id: int, language: str) -> str:\n    from services.config_service import user_data  # чтобы избежать циклического импорта\n    query_lower = query.lower()\n    synonyms = get_synonyms(language)\n    \n    target_category = None\n    for cat, syn_list in synonyms.items():\n        if any(kw in query_lower for kw in syn_list):\n            target_category = cat\n            break\n\n    rec_category = target_category if target_category else \"general\"\n\n    if user_id not in user_recommendations:\n        user_recommendations[user_id] = {\"sushi\": set(), \"grill\": set(), \"sety\": set(), \"general\": set()}\n\n    dishes = load_dishes(language, specific_category=target_category) if target_category else load_dishes(language)\n    available = [d for d in dishes if d.get(\"name\") not in user_recommendations[user_id][rec_category]]\n    if not available:\n        user_recommendations[user_id][rec_category] = set()\n        available = dishes\n\n    if not available:\n        return f\"❌ К сожалению, в данный момент нет рекомендаций по {target_category}.\"\n\n    dish = random.choice(available)\n    user_recommendations[user_id][rec_category].add(dish.get(\"name\"))\n    comment_list = personal_comments.get(target_category, personal_comments[\"general\"])\n    comment = random.choice(comment_list)\n\n    user_info = user_data.get(user_id, {})\n    name = user_info.get(\"name\", \"друг\")\n    polite_form = user_info.get(\"polite\", \"\")\n\n    return (\n        f\"{polite_form.capitalize()} {name}, вот моя рекомендация:\\n\"\n        f\"<b>{dish.get('name', 'Без названия')}</b> ({dish.get('category', '').capitalize()}) - {dish.get('price', '')}\\n\"\n        f\"{dish.get('description', '')}\\n\\n\"\n        f\"{comment}\"\n    )\n\n# Ключевые слова для запросов к администратору\nADMIN_KEYWORDS = [\n    \"кафе\", \"бар\", \"открыт\", \"расписание\", \"бронирование\",\n    \"столик\", \"контакт\", \"телефон\", \"адрес\", \"администратор\"\n]\n\ndef admin_static_answer(query: str) -> str:\n    query_lower = query.lower()\n    if \"открыт\" in query_lower or \"расписание\" in query_lower:\n        return \"Наше кафе работает с 10:00 до 22:00.\"\n    elif \"бронирование\" in query_lower or \"столик\" in query_lower:\n        return \"Для бронирования столика, пожалуйста, звоните по телефону +420 739 462 002.\"\n    elif \"контакт\" in query_lower or \"телефон\" in query_lower or \"адрес\" in query_lower:\n        return (\n            \"Адрес кафе: Tanvaldská 299/299, 463 11 Liberec 30-Vratislavice nad Nisou.\\n\"\n            \"Телефон: +420 739 462 002.\"\n        )\n    else:\n        return \"Я Ника, администратор кафе 'rg-bar'. Чем могу помочь?\"\n"
            }
          ]
        },
        {
          "name": "test_openai.py",
          "type": "file",
          "size": 599,
          "hash_md5": "5c6af20d23b73c7db0945942525af116",
          "hash_sha1": "0de24d4f2aafd4cd010f8cc78ab7909b91d28417",
          "content": "# test_openai.py\n\nimport os\nfrom dotenv import load_dotenv\nimport openai\nimport logging\n\nload_dotenv()\nopenai.api_key = os.getenv(\"OPENAI_API_KEY\")\nlogging.basicConfig(level=logging.INFO)\n\n# Минимальный тестовый запрос\nresponse = openai.ChatCompletion.create(\n    model=\"gpt-3.5-turbo\",\n    messages=[\n        {\"role\": \"system\", \"content\": \"Ты виртуальная помощница.\"},\n        {\"role\": \"user\", \"content\": \"Привет\"}\n    ]\n)\nlogging.info(f\"Test response: {response}\")\nprint(\"Ответ:\", response.choices[0].message.content)\n"
        },
        {
          "name": "utils",
          "type": "directory",
          "children": [
            {
              "name": "helpers.py",
              "type": "file",
              "size": 251,
              "hash_md5": "5099bf0b959c98ecd7f6bbf6e815749b",
              "hash_sha1": "bc37354b1514e64479762e49fc22ac2469ee274c",
              "content": "# utils/helpers.py\n\nimport json\n\ndef load_json_file(path):\n    with open(path, \"r\", encoding=\"utf-8\") as f:\n        return json.load(f)\n\ndef get_user_gender_form(gender):\n    return \"дорогой\" if gender == \"male\" else \"дорогая\"\n"
            },
            {
              "name": "logging_middleware.py",
              "type": "file",
              "size": 404,
              "hash_md5": "152ced40b1a6f4072c3b33e0dbe4d8c8",
              "hash_sha1": "204ae52b9eca7e053cdc79ef25b7bf7b074394db",
              "content": "# utils/logging_middleware.py\n\nimport logging\nfrom aiogram.dispatcher.middlewares.base import BaseMiddleware\nfrom aiogram.types import Message\n\nclass LoggingMiddleware(BaseMiddleware):\n    async def __call__(self, handler, event: Message, data: dict):\n        logging.info(f\"User {event.from_user.id} ({event.from_user.full_name}) sent: {event.text}\")\n        return await handler(event, data)\n"
            }
          ]
        },
        {
          "name": "как с этим работать.png",
          "type": "file",
          "size": 76074,
          "hash_md5": "93065832bd5d8f46d57ae5f3ed8595c7",
          "hash_sha1": "cc2d5f72314e113abee0208f7c30281bc7adf66d"
        },
        {
          "name": "структура проэкта.png",
          "type": "file",
          "size": 65368,
          "hash_md5": "4419fabfe3efce36d1a5b0d432b753ab",
          "hash_sha1": "2b37b9b25d7ab2f712a7e81d3cc06e59e12375ab"
        }
      ]
    },
    {
      "name": "generate_repo_structure.py",
      "type": "file",
      "size": 2407,
      "hash_md5": "3f047eea18951b6dc3ef542a7d0496b8",
      "hash_sha1": "1f8567bd6a923ecef0ed924cbb1a13af023ffbbb",
      "content": "import os\nimport json\nimport hashlib\nfrom datetime import datetime\n\n\ndef get_file_hash(path, algo='md5'):\n    hash_func = hashlib.md5() if algo == 'md5' else hashlib.sha1()\n    try:\n        with open(path, 'rb') as f:\n            for chunk in iter(lambda: f.read(4096), b\"\"):\n                hash_func.update(chunk)\n        return hash_func.hexdigest()\n    except Exception as e:\n        return f\"Ошибка при хешировании: {e}\"\n\n\ndef get_repo_structure_with_content(path, read_extensions=(\".py\", \".json\", \".md\", \".txt\")):\n    def walk(current_path):\n        structure = []\n        for entry in os.scandir(current_path):\n            if entry.name.startswith(\".\") or entry.name == \"venv\":\n                continue\n            if entry.is_dir():\n                structure.append({\n                    \"name\": entry.name,\n                    \"type\": \"directory\",\n                    \"children\": walk(entry.path)\n                })\n            elif entry.is_file():\n                file_info = {\n                    \"name\": entry.name,\n                    \"type\": \"file\",\n                    \"size\": os.path.getsize(entry.path),\n                    \"hash_md5\": get_file_hash(entry.path, 'md5'),\n                    \"hash_sha1\": get_file_hash(entry.path, 'sha1')\n                }\n                if entry.name.endswith(read_extensions):\n                    try:\n                        with open(entry.path, \"r\", encoding=\"utf-8\") as f:\n                            file_info[\"content\"] = f.read()\n                    except Exception as e:\n                        file_info[\"content\"] = f\"⚠️ Ошибка при чтении файла: {e}\"\n                structure.append(file_info)\n        return structure\n\n    return {\n        \"name\": os.path.basename(path),\n        \"type\": \"directory\",\n        \"scanned_at\": datetime.now().isoformat(),\n        \"children\": walk(path)\n    }\n\n\nif __name__ == \"__main__\":\n    repo_path = os.path.abspath(\".\")  # путь к текущему клонированному репозиторию\n    result = get_repo_structure_with_content(repo_path)\n\n    with open(\"repo_structure.json\", \"w\", encoding=\"utf-8\") as out:\n        json.dump(result, out, ensure_ascii=False, indent=2)\n\n    print(\"✅ JSON-файл со структурой проекта сохранён: repo_structure.json\")\n"
    },
    {
      "name": "generate_repo_structure.txt",
      "type": "file",
      "size": 72,
      "hash_md5": "7740e8899c19bfdfa4f9ea96d4f984bc",
      "hash_sha1": "1a8710084e18c9984fa20b079b460266a968b59e",
      "content": "скрипт создающий json для нового чата с gpt"
    },
    {
      "name": "push_router.py",
      "type": "file",
      "size": 3351,
      "hash_md5": "248f47af023f6e0e465372e76aea1399",
      "hash_sha1": "75d42cd10c547f0b720001f9be9a4a29ed520f3b",
      "content": "import os\nfrom git import Repo\n\n# === НАСТРОЙКИ ===\nGITHUB_TOKEN = \"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\"\nREPO_URL = f\"https://{GITHUB_TOKEN}:x-oauth-basic@github.com/vinipux03/bots.git\"\nLOCAL_PATH = \"bots_clone\"\nCOMMIT_MSG = \"🧠 Добавлен интеллектуальный маршрутизатор smart_router\"\n\n# === КЛОНИРОВАНИЕ ===\nif not os.path.exists(LOCAL_PATH):\n    Repo.clone_from(REPO_URL, LOCAL_PATH)\n\nrepo = Repo(LOCAL_PATH)\nrouter_path = os.path.join(LOCAL_PATH, \"routers\")\nos.makedirs(router_path, exist_ok=True)\n\n# === КОД ИЗ CANVAS ===\nrouter_code = '''from aiogram import types\nfrom rgbar import get_language, recommend_dish, menu_command\nimport asyncio\n\n# 🔍 Ключевые слова\nORDER_WORDS = [\n    \"заказать\", \"сделать заказ\", \"оформить\", \"добавь в корзину\",\n    \"оплата\", \"хочу заказать\"\n]\n\nMENU_WORDS = [\n    \"меню\", \"что есть\", \"ассортимент\", \"выбор\", \"блюда\",\n    \"что можно заказать\", \"покажи\", \"голоден\", \"ужин\", \"завтрак\", \"обед\"\n]\n\nRECOMMEND_WORDS = [\n    \"посоветуй\", \"рекомендуешь\", \"что вкусное\", \"предложи\", \"удиви\", \"что бы ты выбрала\"\n]\n\nCATEGORY_WORDS = {\n    \"sushi\": [\"суши\", \"роллы\", \"маки\"],\n    \"grill\": [\"гриль\", \"мясо\", \"барбекю\", \"шашлык\", \"стейк\"],\n    \"sety\": [\"сеты\", \"сет\", \"комбо\", \"на двоих\", \"на компанию\"]\n}\n\n# 🧠 Интеллектуальный роутер\nasync def smart_router(message: types.Message):\n    text = message.text.lower()\n    user_id = message.from_user.id\n    language = get_language(user_id)\n\n    if any(word in text for word in ORDER_WORDS):\n        await message.answer(\"Чтобы оформить заказ, открой меню через /menu и выбери блюдо. Я помогу с оформлением!\")\n        return\n\n    if any(word in text for word in MENU_WORDS):\n        await menu_command(message)\n        return\n\n    for category, words in CATEGORY_WORDS.items():\n        if any(word in text for word in words):\n            recommendation = await recommend_dish(text, user_id, language)\n            await message.answer(recommendation, parse_mode=\"HTML\")\n            return\n\n    if any(word in text for word in RECOMMEND_WORDS):\n        await message.answer(\"Секундочку, подберу для тебя что-то вкусненькое... 🍣\")\n        await asyncio.sleep(2)\n        recommendation = await recommend_dish(text, user_id, language)\n        await message.answer(recommendation, parse_mode=\"HTML\")\n'''\n\nwith open(os.path.join(router_path, \"smart_router.py\"), \"w\", encoding=\"utf-8\") as f:\n    f.write(router_code)\n\n# === ДОБАВЛЯЕМ В main.py ===\nmain_path = os.path.join(LOCAL_PATH, \"main.py\")\nwith open(main_path, \"a\", encoding=\"utf-8\") as f:\n    f.write(\"\\nfrom routers.smart_router import smart_router\\ndp.message()(smart_router)\\n\")\n\n# === COMMIT + PUSH ===\nrepo.git.add(all=True)\nrepo.index.commit(COMMIT_MSG)\nrepo.remote(name=\"origin\").push()\nprint(\"✅ УСПЕХ! Код залит в репозиторий.\")\n"
    },
    {
      "name": "valera-assistant.txt",
      "type": "file",
      "size": 40,
      "hash_md5": "0c922d9d9faece7d2528085259e63519",
      "hash_sha1": "6d8a66d4af5af4a6ede0282e38d3698ad12321ed",
      "content": "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"
    }
  ]
}